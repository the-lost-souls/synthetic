;----------------------------- ASSEMBLER SOURCE -----------------------------
;Name            : CVec.asm
;Author          : Cyberfish of The Lost Souls
;Last update     : 06.05.1995
;Action          : A concave vectorobject
;
;
;Using Libraries             : -
;Using external files/macros : -
;
;Notes : The routine just performs a depth-sort, and may phuck up quite
;terrible if objects are places to close to each other, or polygons start
;overlapping each other heavily... New version to come...
;----------------------------------------------------------------------------


DOSSEG
.Model  Small
.STACK  300h

ASSUME          ds : MyData, cs : MyCode

MaxVertices     EQU 15
MaxPolys        EQU 200
MaxPoints       EQU 200

include bwsb.inc                        ;external declarations
include gdmtype.inc                     ;GDM module file format structures


;------------------------------ DATA SEGMENT ---------------------------------

MyData        SEGMENT

EXTRN           Presents : BYTE, Logo : BYTE, Palette : BYTE
EXTRN           IPal1, IPal2, IPal3 : BYTE
EXTRN           Font : BYTE

;----------------------------- All data for player : --------------------------

ModHead         GDMHeader   <?>

MSEConfigFile  struc
  SoundCard     dw      05
  BaseIO        dw      0FFFFh
  IRQ           dw      0FFFFh
  DMA           dw      0FFFFh
  SoundQuality  dw      3
MSEConfigFile   ends

MSEConfig       MSEConfigFile   <>
MSECFGFileName  db      'MSE.CFG',0         ;Name of MSE.CFG file
ConfigError     db      'No Sound selected in SETUP. Please run SETUP',13,10,'$'

MSEOversample   db      16, 22, 45, 8

Temp            dw      ?
Temp2           dw      ?

ErrorUnknown    db      'Unknown error',13,10,'$'

MSEErrorTable   dw      offset MSE1, offset MSE2, offset MSE3, offset MSE4
                dw      offset ErrorUnknown, offset MSE6, offset MSE7
                dw      offset MSE8, offset MSE9, offset MSE10, offset MSE11
                dw      offset MSE12

MSE1    db      'Base I/O address autodetection failure',13,10,'$'
MSE2    db      'IRQ level autodetection failure',13,10,'$'
MSE3    db      'DMA channel autodetection failure',13,10,'$'
MSE4    db      'DMA channel not supported',13,10,'$'

MSE6    db      'Sound device does not respond',13,10,'$'
MSE7    db      'Memory control blocks destroyed',13,10,'$'
MSE8    db      'Insufficient memory for mixing buffers',13,10,'$'
MSE9    db      'Insufficient memory for MSE file',13,10,'$'
MSE10   db      'MSE has invalid ID string (corrupt/non-existant)',13,10,'$'
MSE11   db      'MSE disk read failure',13,10,'$'
MSE12   db      'MVSOUND.SYS not loaded (required for PAS use)',13,10,'$'

GDMErrorTable   dw      offset GDM1, offset GDM2, offset GDM3, offset GDM4
                dw      offset GDM5, offset GDM6

GDM1    db      'Module is corrupt',13,10,'$'
GDM2    db      'Could not autodetect module type',13,10,'$'
GDM3    db      'Bad format ID',13,10,'$'
GDM4    db      'Out of memory',13,10,'$'
GDM5    db      'Cannot unpack samples',13,10,'$'
GDM6    db      'AdLib samples not supported',13,10,'$'

SBMSEFile       db      'synth2.tiá',0," "

HexTable        db      '0123456789ABCDEF'


Banner          db      13, 10
                db      'BWSB Example Module Player', 13, 10
                db      'Copyright (c) 1995, Edward Schlunder',13,10,13,10,'$'

SoundDevice     db      'Sound Device: $'

Address         db      'Addr: $'
Address2        db      'h  IRQ: $'
Address3        db      '  DMA: $'
Address4        db      'x',13,10,'$'

InputFile       db      'Module file: $'
ModFileInput    db      'synth.tiá'
ModFile         db      'synth.tiá', 0, '$'

CantFindFile    db      "Can't find file: $"
SayLoadModule   db      'Loading Module: $'

SayChannels     db      'Channels: $'
SayOversample   db      'Oversampling: $'
SayOversample2  db      ' Hz$'
CRLF            db      13,10,'$'

;----------------------------------------------------------------------------
;The sinus table for angles in 1 - 360 degrees. All values are multiplied
;by eight to save decimals.
;----------------------------------------------------------------------------

SinTabl         DW    4,    9,   13,   18,   22,   27,   31,   36,   40
                DW   44,   49,   53,   58,   62,   66,   71,   75,   79
                DW   83,   88,   92,   96,  100,  104,  108,  112,  116
                DW  120,  124,  128,  132,  136,  139,  143,  147,  150
                DW  154,  158,  161,  165,  168,  171,  175,  178,  181
                DW  184,  187,  190,  193,  196,  199,  202,  204,  207
                DW  210,  212,  215,  217,  219,  222,  224,  226,  228
                DW  230,  232,  234,  236,  237,  239,  241,  242,  243
                DW  245,  246,  247,  248,  249,  250,  251,  252,  253
                DW  254,  254,  255,  255,  255,  256,  256,  256,  256
                DW  256,  256,  256,  255,  255,  255,  254,  254,  253
                DW  252,  251,  250,  249,  248,  247,  246,  245,  243
                DW  242,  241,  239,  237,  236,  234,  232,  230,  228
                DW  226,  224,  222,  219,  217,  215,  212,  210,  207
                DW  204,  202,  199,  196,  193,  190,  187,  184,  181
                DW  178,  175,  171,  168,  165,  161,  158,  154,  150
                DW  147,  143,  139,  136,  132,  128,  124,  120,  116
                DW  112,  108,  104,  100,   96,   92,   88,   83,   79
                DW   75,   71,   66,   62,   58,   53,   49,   44,   40
                DW   36,   31,   27,   22,   18,   13,    9,    4,    0
                DW   -4,   -9,  -13,  -18,  -22,  -27,  -31,  -36,  -40
                DW  -44,  -49,  -53,  -58,  -62,  -66,  -71,  -75,  -79
                DW  -83,  -88,  -92,  -96, -100, -104, -108, -112, -116
                DW -120, -124, -128, -132, -136, -139, -143, -147, -150
                DW -154, -158, -161, -165, -168, -171, -175, -178, -181
                DW -184, -187, -190, -193, -196, -199, -202, -204, -207
                DW -210, -212, -215, -217, -219, -222, -224, -226, -228
                DW -230, -232, -234, -236, -237, -239, -241, -242, -243
                DW -245, -246, -247, -248, -249, -250, -251, -252, -253
                DW -254, -254, -255, -255, -255, -256, -256, -256, -256
                DW -256, -256, -256, -255, -255, -255, -254, -254, -253
                DW -252, -251, -250, -249, -248, -247, -246, -245, -243
                DW -242, -241, -239, -237, -236, -234, -232, -230, -228
                DW -226, -224, -222, -219, -217, -215, -212, -210, -207
                DW -204, -202, -199, -196, -193, -190, -187, -184, -181
                DW -178, -175, -171, -168, -165, -161, -158, -154, -150
                DW -147, -143, -139, -136, -132, -128, -124, -120, -116
                DW -112, -108, -104, -100,  -96,  -92,  -88,  -83,  -79
                DW  -75,  -71,  -66,  -62,  -58,  -53,  -49,  -44,  -40
                DW  -36,  -31,  -27,  -22,  -18,  -13,   -9,   -4,    0
                DW    4,    9,   13,   18,   22,   27,   31,   36,   40
                DW   44,   49,   53,   58,   62,   66,   71,   75,   79
                DW   83,   88,   92,   96,  100,  104,  108,  112,  116
                DW  120,  124,  128,  132,  136,  139,  143,  147,  150
                DW  154,  158,  161,  165,  168,  171,  175,  178,  181
                DW  184,  187,  190,  193,  196,  199,  202,  204,  207
                DW  210,  212,  215,  217,  219,  222,  224,  226,  228
                DW  230,  232,  234,  236,  237,  239,  241,  242,  243
                DW  245,  246,  247,  248,  249,  250,  251,  252,  253
                DW  254,  254,  255,  255,  255,  256,  256,  256,  256
                DW  256,  256,  256,  255,  255,  255,  254,  254,  253

X               DW 0                            ;
Y               DW 0                            ;
Z               DW 0                            ;Variables for procedure
X_Angle         DW 0                            ;"ROTATE"
Y_Angle         DW 0                            ;Storage variables for the
Z_Angle         DW 0                            ;input values
NewX            DW 0                            ;
NewY            DW 0                            ;
NewZ            DW 0                            ;

P_Col           DW 0                            ;
P_X1Inc         DW 0                            ;
P_X2Inc         DW 0                            ;
P_DeltaX1       DW 0                            ;
P_DeltaY1       DW 0                            ;
P_DeltaX2       DW 0                            ;
P_DeltaY2       DW 0                            ;
P_StartOffs     DW 0                            ;Variables for procedure
P_EndOffs       DW 0                            ;"POLY"
P_NextX1        DW 0                            ;Next X clockwise
P_NextX2        DW 0                            ;Next X counterclockwise
P_COffs1        DW 0                            ;
P_COffs2        DW 0                            ;
P_UpperOffs     DW 0                            ;
P_LowestY       DW 0                            ;
P_YCounter      DW 0                            ;
P_Vertices      DB 0                            ;Number of Vertices

;----------------------------------------------------------------------------
;These are the random XYZ values for the stars.
;----------------------------------------------------------------------------

StarTabl        DW  497,  268,  460,  107,  -23, -221, -255,   -8, -118, -424,  467,  141, -433, -23, -341
                DW -339,   51,  219,   13,  296,  191,   47,  269, -467,  163, -224,  -60, 453, -354, -78
                DW  -51,   61,  406, -214,  -58,   73,  177, -425,  351,  401,   34,  -67, 491, -173, -334
                DW   -9,  237, -423,  218,  291,   83, -193, -359,  194, -371,  217, -296, -364, -212, 284
                DW   96,  337,  266, -153,  294, -179,  112,   34,  116, -139,  375, -250, 127, 207, 179
                DW  230,  327, -294, -246,  380, -216,  167,  220, -110,  146, -404,  173, 355, 194, -359
                DW  375, -107, -145,  376,   79,  -10,  364, -237, -191, -447,  476,  421, -383, 413, -85
                DW -456,  138, -241,  470,   97,  -32,  232,  428, -378,  174, -323,  239, 295, -10, -233
                DW -388,   70,  -28,   11,  445,   23,  183, -155,  273,  272,  197, -169, 143,  56, -44
                DW  159,  104, -143, -196,  -36, -280, -344,  213,  184,  285, -303,   26, -61, -343, 352
                DW  247, -334, -106,  -33, -322, -494,   93, -222,  -47, -339,  130,  271, -230, -288, 204
                DW -417,  348,  143,  356, -177,  438, -465,  403,  392,  402,  178,  -60, -302, 182,  90
                DW  341, -161,  189, -346,  -75,  143,  420,  391, -276, -343,  342, -427, 499, -51, 350
                DW -322,  -49, -166, -172,  -86,  284, -116,  133,  302, -452, -172,   29,  48, 433, 198
                DW  379,  183,  431, -154,  141, -276, -453,  174,  -47, -184,  -28,  190, -120, -389, 396
                DW -239,   86, -147, -122, -344, -492,  410,  455,  251, -193,  239, -112,   2, 162, -484
                DW  257,   34, -319,  -87,  276,  480, -497,  259, -447,  402, -139,   73, 170, 425, -324
                DW -306,  289,  428,  457,    2, -316,  -88, -421,  -41,  388, -102,  209, 456, -140, 469
                DW  448,  197,  356,  310,  479, -386,  424, -140, -244,   34, -311,  -66, -444, -405, 356
                DW  -76,  416, -369,  100,  -64,  268, -470,  268,  481,  310,  283, -443, -436, -87, 206
                DW -399,  299,  115, -405,  130,  394,  493,  262, -373,  123,  458,  214, -346, -358, 277
                DW  -46,  270, -236,  367,  121,  206, -463, -346,  483, -265,  258,   48, 490, 389, -244
                DW  323, -116,  -45,   79,  -34,  107,  431,  -78, -227,  473, -159,  422, 245, 355, 102
                DW  166,   91, -136,  356, -461,  370, -244,  435, -252,   77, -453,  392, 152, 218,  81
                DW  261, -256, -329,   22,  466,  -91,  384,   17, -436, -206, -307, -497, 224, -76, -170
                DW  402, -361,  -90, -105,  181, -239,  360, -152,   17,   68,  353,  327,  50, -251,  89
                DW  324,  -51, -493, -433,   18,  297,  384,  407,  328, -497,  287,  175, -41, 250, 139
                DW -187,    8, -308, -178,   43,  412, -102,  335, -150, -201,  276, -161, 400, -477, -42
                DW -482,   11,  -54,  375,  412,   25,  250, -478, -342, -295,  337, -368, -189, 497, -397
                DW  253,  149,  288, -353,  -47,  165, -500,  195,  151, -370,  149, -199, -204, -62, 203
                DW  112, -120, -382, -126, -255,   32,  215, -311,   85, -346,  -55,  452, -473, 362, -200
                DW  457,  -14, -311,   23, -437, -304,  303,  132,  -16, -376,  218,  -96, -85,  10, -271
                DW    5,  342, -133,   66,  166, -349,  458,  -17,  107, -109,   67, -211, -398, -189, -406
                DW -459,  373,   19, -204,  377, -268, -130,  183,  250,  142,  -40,  -93, -487, 116, 319
                DW  160,  120,  133, -336, -107,  404,  486,  330,  -98, -318,  234, -270, -433, 166, -310
                DW  463, -189,  -92,  100,  410,   51, -222,  451,  453,  212, -306, -434, -339,  81, -404
                DW  -73,   48, -438,  -97, -129,  279, -380,  424,  103,  -86,  -31,  -26, -307,  73, -213
                DW  161,  -27, -398,   27,   94,    5,  124,   96,   -8, -445, -425,  -34, -76, -270,  85
                DW   11,  164, -295,  306,  106,  -98,  218, -437, -192,  298, -254,  424, -369,  94, -464
                DW -450, -245,  292,  -82,  -61, -327, -382, -435,  -79, -396, -239, -373, -487, -293, -378
                DW  -90,   -5,  388,   55, -484, -190,  261, -165, -372,  160, -457, -162, 348, -105, -60
                DW -331, -233, -443,  329,  220, -305, -300, -245, -109, -291, -174, -424, 465, 449, -440
                DW -228, -142,  337,  -79, -265,  250,  134, -204,   73,  306,    9,  -22, 241, 494,  43
                DW  376,   23, -287,  343,  256,  192, -257,  178, -371, -141,  216, -179, 131, 342, 127
                DW    8,   23, -419,   94,  196,  156,  400, -132,   33,   12,  166, -186, -282, 190, -355
                DW  359,  170,  -66,   88, -364,  175, -425, -141, -198,  -56,  -19,  148, -215, -263, 391
                DW -441,  410,  494,  228, -372,  183, -377, -237, -440,  170,  391, -274, -257, -255, -430
                DW  235, -172,  167,  270, -348,  417,  233,  126,  207, -331,  479,  271, -469, 364, -321
                DW -253,  429,  214, -381,  300, -486,  487,  368, -291, -434,  220, -443,  89, -284, -416
                DW  378, -170, -181,  189,  293,   87, -374,  374, -306,   14, -389, -206,  -7, 143, -432
                DW -174, -126, -406,  333, -381, -304,   22,  236, -191,  281,  496,  158, 214, -429, -287
                DW  282,   49, -119,  218,  -87,  455, -251, -431,  -30,  400, -402, -393,  11, 229, -292
                DW  246, -104,  433,  232,  472,  456,  418,  227,  459, -234,  325,  -52, -17, -104, 203

Col             DW (0)                          ;Variables for the star-
AngleX          DW 0                            ;procedure
AngleY          DW 0
AngleZ          DW 0
StRX            DB 0
StRY            DB 0
StRZ            DB 0
StXPos          DW 1500
StSpeed         DB 0

RIntAngle       DW 0                            ;Variables for the image-
RXPos           DW 0
RYPos           DW 0
RExtAngle       DW 0
RX              DW 0
RY              DW 0
RIntAdd         DB 1
RExtAdd         DB 0

Flag1           DB 1                            ;Different flags for
Flag2           DB 0                            ;starting the actions...
Flag3           DB 0
Flag3_C         DW 250
Flag4           DB 0
Flag5           DB 0
Flag5_C         DW 190
Flag6           DB 0
Flag6_C         DW 100
Flag7           DB 0
Flag7_C         DW 100
Flag8           DB 0
Flag8_C         DW 90
Flag9           DB 0
Flag10          DB 0
Flag10_C        DW 160
Flag20          DB 0
Flag20_C        DB 50                           ;Done flags for part 1

Flag11          DB 1
Flag12          DB 0
Flag13          DB 0
Flag14          DB 0
Flag14_C        DB 200
Flag15          DB 0
Flag15_C        DB 0
Flag16          DB 0
Flag16_C        DB 0
Flag17          DB 0
Flag17_C        DB 0
Flag18          DB 0
Flag18_C        DB 0
Flag19          DB 0
Flag19_C        DB 0                            ;Done flags for part 2

Flag21          DB 0
Flag21_C1       DW 0
Flag21_C2       DB 1
Flag22          DB 0
Flag22_C        DW 360
Flag23          DB 0
Flag24          DB 0
Flag24_C        DB 50
Flag25          DB 0
Flag25_C        DB 50
Flag26          DB 0
Flag26_C        DB 50
Flag27          DB 0
Flag27_C        DB 150                          ;150
Flag28          DB 0
Flag28_C        DB 150
Flag29          DB 0
Flag29_C        DB 150
Flag30          DB 0
Flag31          DB 0
Flag32          DB 0
Flag33          DB 0
Flag33_C        DB 180
Flag34          DB 0
Flag35          DB 0
Flag35_C        DW 400
Flag36          DB 0

Str1            DB 9, 14, 20, 18, 15, 4, 21, 3, 20, 9, 15, 14, 'á'
;Introduction
Str2            DB 2, 25, 'á'
;By
Str3            DB 20, 8, 5, 32, 12, 15, 19, 20, 32, 19, 15, 21, 12, 19, 'á'
;The Lost Souls
Str4            DB 7, 18, 1, 16, 8, 9, 3, 19, 27, 'á'
;Graphics:
Str5            DB 18, 5, 24, 32, 18, 1, 23, 8, 5, 1, 4, 'á'
;Rex Rawhead
Str6            DB 5, 21, 18, 15, 14, 25, 13, 15, 21, 19, 'á'
;Euronymous
Str7            DB 3, 25, 2, 5, 18, 6, 9, 19, 8, 'á'
;Cyberfish
Str8            DB 13, 21, 19, 9, 3, 27, 'á'
;Music:
Str9            DB 11, 5, 26, 15, 15, 13, 5, 18, 'á'
;Kezoomer
Str10           DB 3, 15, 4, 9, 14, 7, 27, 'á'
;Coding
Str11           DB 15, 2, 10, 5, 3, 20, 19, 27, 'á'
;Objects:
Str12           DB 7, 5, 14, 5, 18, 1, 12, 32, 9, 4, 5, 1, 19, 29, 'á'
;General ideas,
Str13           DB 9, 14, 19, 16, 9, 18, 1, 20, 9, 15, 14, 'á'
;Inspiration
Str14           DB 1, 14, 4, 32, 10, 15, 11, 5, 19, 27, 'á'
;and jokes:
Str15           DB 1, 32, 16, 18, 15, 4, 21, 3, 20, 9, 15, 14, 32, 15, 6, 'á'
;A production of
Str16            DB 20, 8, 5, 32, 12, 15, 19, 20, 32, 19, 15, 21, 12, 19, 33, 'á'
;The Lost Souls 1995

LSSHift         DB 7


NumOfObjects    DW 1
ObjectList      DW OFFSET Object1
                DW OFFSET Object2
                DW OFFSET Object3


Object1         DW 0000, -200, 0090             ;The original pos in X, Y, Z
                DW 0000, 0000, 0000             ;The current calculated pos
                DW 0000, 0000, 0000             ;The current object angle
                DB 00, 00, 00                   ;Angle to rotate each frame
                DW 0270, 0000, 0180             ;The current internal angle
                DB 00, 00, 00                   ;Angle to rotate each frame

                DB 76                           ;NumOfPoints
                DW  80, 40, -30
                DW -80, 40, -30
                DW -80,-40, -30
                DW  80,-40, -30

                DW  80, 40, 30
                DW -80, 40, 30
                DW -80,-40, 30
                DW  80,-40, 30

                DW  70,-20, -40                 ;The upper "T"
                DW  20,-20, -40
                DW  20,-10, -40
                DW  40,-10, -40
                DW  40, 20, -40
                DW  50, 20, -40
                DW  50,-10, -40
                DW  70,-10, -40

                DW  70,-20, -30                 ;The lower "T"
                DW  20,-20, -30
                DW  20,-10, -30
                DW  40,-10, -30
                DW  40, 20, -30
                DW  50, 20, -30
                DW  50,-10, -30
                DW  70,-10, -30

                DW  10,-20, -40                 ;The upper "L"
                DW -00,-20, -40
                DW -00, 10, -40
                DW -20, 10, -40
                DW -20, 20, -40
                DW  10, 20, -40

                DW  10,-20, -30                 ;The lower "L"
                DW -00,-20, -30
                DW -00, 10, -30
                DW -20, 10, -30
                DW -20, 20, -30
                DW  10, 20, -30

                DW -30,-20, -40                 ;The upper "S"
                DW -60,-20, -40
                DW -60,-10, -40
                DW -40,-10, -40
                DW -40,-00, -40
                DW -30,-00, -40
                DW -50,-00, -40
                DW -60,-00, -40
                DW -60, 20, -40
                DW -30, 20, -40
                DW -30, 10, -40
                DW -50, 10, -40

                DW -30,-20, -30                 ;The lower "S"
                DW -60,-20, -30
                DW -60,-10, -30
                DW -40,-10, -30
                DW -40,-00, -30
                DW -30,-00, -30
                DW -50,-00, -30
                DW -60,-00, -30
                DW -60, 20, -30
                DW -30, 20, -30
                DW -30, 10, -30
                DW -50, 10, -30

                DW -10, 10 , 30                 ;Jau, de e brre lkkert
                DW  10, 10 , 30
                DW  10,-10 , 30
                DW -10,-10 , 30

                DW -10, 10 , 80                 ;Bob-bob-bob
                DW  10, 10 , 80
                DW  10,-10 , 80
                DW -10,-10 , 80

                DW -30, 30 ,130                 ; ska brre blssa tu bljen
                DW  30, 30 ,130
                DW  30,-30 ,130
                DW -30,-30 ,130

                DW -10, 10 ,180                 ;Olaf,  str under misteltejn
                DW  10, 10 ,180
                DW  10,-10 ,180
                DW -10,-10 ,180

                    ;
                DB 53                            ;NumOfPolys
                DB  02, 04, 36, 37, 38, 39      ;The "S"
                DB  02, 04, 36, 39, 40, 41
                DB  02, 04, 42, 43, 44, 47
                DB  02, 04, 46, 47, 44, 45
                DB  02, 04, 48, 49, 37, 36
                DB  02, 04, 49, 50, 38, 37
                DB  02, 04, 39, 38, 50, 51
                DB  02, 04, 40, 39, 51, 52
                DB  02, 04, 41, 40, 52, 53
                DB  02, 04, 36, 41, 53, 48
                DB  02, 04, 54, 55, 43, 42
                DB  02, 04, 44, 43, 55, 56
                DB  02, 04, 45, 44, 56, 57
                DB  02, 04, 46, 45, 57, 58
                DB  02, 04, 47, 46, 58, 59
                DB  02, 04, 42, 47, 59, 54

                DB  02, 04, 24, 25, 26, 29      ;The "L"
                DB  02, 04, 26, 27, 28, 29
                DB  02, 04, 30, 31, 25, 24
                DB  02, 04, 31, 32, 26, 25
                DB  02, 04, 32, 33, 27, 26
                DB  02, 04, 33, 34, 28, 27
                DB  02, 04, 34, 35, 29, 28
                DB  02, 04, 24, 29, 35, 30

                DB  02, 04, 08, 09, 10, 15      ;The "T"
                DB  02, 04, 14, 11, 12, 13
                DB  02, 04, 16, 17, 09, 08
                DB  02, 04, 17, 18, 10, 09
                DB  02, 04, 18, 19, 11, 10
                DB  02, 04, 19, 20, 12, 11
                DB  02, 04, 20, 21, 13, 12
                DB  02, 04, 21, 22, 14, 13
                DB  02, 04, 22, 23, 15, 14
                DB  02, 04, 23, 16, 08, 15

                DB  01, 04, 00, 01, 02, 03      ;The box
                DB  01, 04, 07, 06, 05, 04
                DB  01, 04, 04, 05, 01, 00
                DB  01, 04, 05, 06, 02, 01
                DB  01, 04, 06, 07, 03, 02
                DB  01, 04, 07, 04, 00, 03

                DB  01, 04, 64, 67, 63, 60      ; The Julekalender
                DB  01, 04, 63, 67, 66, 62
                DB  01, 04, 64, 60, 61, 65
                DB  01, 04, 62, 66, 65, 61

                DB  01, 04, 68, 71, 67, 64
                DB  01, 04, 67, 71, 70, 66
                DB  01, 04, 68, 64, 65, 69
                DB  01, 04, 66, 70, 69, 65

                DB  01, 04, 72, 75, 71, 68
                DB  01, 04, 71, 75, 74, 70
                DB  01, 04, 72, 68, 69, 73
                DB  01, 04, 70, 74, 73, 69

                DB  01, 04, 72,73,74,75

Object2         DW 0000, 0090, 0080             ;The original pos in X, Y, Z
                DW 0000, 0000, 0000             ;The current calculated pos
                DW 0000, 0000, 0000             ;The current object angle
                DB 00, 00, 00                   ;Angle to rotate each frame
                DW 0270, 0000, 0000             ;The current internal angle
                DB 00, 00, 00                   ;Angle to rotate each frame

                DB 52                           ;NumOfPoints
                DW -70,-20, 0                 ;The upper "T"
                DW -20,-20, 0
                DW -20,-10, 0
                DW -40,-10, 0
                DW -40, 20, 0
                DW -50, 20, 0
                DW -50,-10, 0
                DW -70,-10, 0

                DW -10,-20, 0                 ;The upper "L"
                DW  00,-20, 0
                DW  00, 10, 0
                DW  20, 10, 0
                DW  20, 20, 0
                DW -10, 20, 0

                DW  30,-20, 0                 ;The upper "S"
                DW  60,-20, 0
                DW  60,-10, 0
                DW  40,-10, 0
                DW  40,-00, 0
                DW  30,-00, 0
                DW  50,-00, 0
                DW  60,-00, 0
                DW  60, 20, 0
                DW  30, 20, 0
                DW  30, 10, 0
                DW  50, 10, 0

                DW -140,-040, -120                 ;The upper "T"
                DW -040,-040, -120
                DW -040,-020, -120
                DW -080,-020, -120
                DW -080, 040, -120
                DW -100, 040, -120
                DW -100,-020, -120
                DW -140,-020, -120

                DW -20,-40, -120                 ;The upper "L"
                DW  00,-40, -120
                DW  00, 20, -120
                DW  40, 20, -120
                DW  40, 40, -120
                DW -20, 40, -120

                DW  60,-40, -120                 ;The upper "S"
                DW  120,-40, -120
                DW  120,-20, -120
                DW  80,-20, -120
                DW  80,-00, -120
                DW  60,-00, -120
                DW  100,-00, -120
                DW  120,-00, -120
                DW  120, 40, -120
                DW  60, 40, -120
                DW  60, 20, -120
                DW  100, 20, -120

                DB 34                            ;NumOfPolys 34
                DB  04, 04, 00, 01, 02, 07      ;The "T"
                DB  04, 04, 06, 03, 04, 05

                DB  04, 04, 08, 09, 10, 13      ;The "L"
                DB  04, 04, 10, 11, 12, 13

                DB  04, 04, 14, 15, 16, 17      ;The "S"
                DB  04, 04, 14, 17, 18, 19
                DB  04, 04, 20, 21, 22, 25
                DB  04, 04, 24, 25, 22, 23

                DB  01, 04, 00, 01, 27, 26      ;The "T"
                DB  01, 04, 01, 02, 28, 27
                DB  01, 04, 02, 03, 29, 28
                DB  01, 04, 03, 04, 30, 29
                DB  01, 04, 04, 05, 31, 30
                DB  01, 04, 05, 06, 32, 31
                DB  01, 04, 06, 07, 33, 32
                DB  01, 04, 07, 00, 26, 33

                DB  01, 04, 08, 09, 35, 34      ;The "L"
                DB  01, 04, 09, 10, 36, 35
                DB  01, 04, 10, 11, 37, 36
                DB  01, 04, 11, 12, 38, 37
                DB  01, 04, 12, 13, 39, 38
                DB  01, 04, 13, 08, 34, 39

                DB  01, 04, 14, 15, 41, 40      ;The "S"
                DB  01, 04, 15, 16, 42, 41
                DB  01, 04, 16, 17, 43, 42
                DB  01, 04, 17, 18, 44, 43
                DB  01, 04, 18, 19, 45, 44
                DB  01, 04, 19, 14, 40, 45
                DB  01, 04, 20, 21, 47, 46
                DB  01, 04, 21, 22, 48, 47
                DB  01, 04, 22, 23, 49, 48
                DB  01, 04, 23, 24, 50, 49
                DB  01, 04, 24, 25, 51, 50
                DB  01, 04, 25, 20, 46, 51

Object3         DW 0000, 0000, -320             ;The original pos in X, Y, Z (-320)
                DW 0000, 0000, 0000             ;The current calculated pos
                DW 0000, 0000, 0000             ;The current object angle
                DB 00, 00, 00                   ;Angle to rotate each frame
                DW 0000, 0000, 0000             ;The current internal angle
                DB 00, 00, 03                   ;Angle to rotate each frame

                DB 144                           ;NumOfPoints
                DW  49,   -9, 60
                DW  47,  -17, 60
                DW  43,  -25, 60
                DW  38,  -32, 60
                DW  32,  -38, 60
                DW  25,  -43, 60
                DW  17,  -47, 60
                DW   9,  -49, 60
                DW   0,  -50, 60
                DW  -9,  -49, 60
                DW -17,  -47, 60
                DW -25,  -43, 60
                DW -32,  -38, 60
                DW -38,  -32, 60
                DW -43,  -25, 60
                DW -47,  -17, 60
                DW -49,   -9, 60
                DW -50,    0, 60
                DW -49,    9, 60
                DW -47,   17, 60
                DW -43,   25, 60
                DW -38,   32, 60
                DW -32,   38, 60
                DW -25,   43, 60
                DW -17,   47, 60
                DW  -9,   49, 60
                DW   0,   50, 60
                DW   9,   49, 60
                DW  17,   47, 60
                DW  25,   43, 60
                DW  32,   38, 60
                DW  38,   32, 60
                DW  43,   25, 60
                DW  47,   17, 60
                DW  49,    9, 60
                DW  50,    0, 60

                DW  69,  -12, -3
                DW  66,  -24, -3
                DW  61,  -35, -3
                DW  54,  -45, -3
                DW  45,  -54, -3
                DW  35,  -61, -3
                DW  24,  -66, -3
                DW  12,  -69, -3
                DW   0,  -70, -3
                DW -12,  -69, -3
                DW -24,  -66, -3
                DW -35,  -61, -3
                DW -45,  -54, -3
                DW -54,  -45, -3
                DW -61,  -35, -3
                DW -66,  -24, -3
                DW -69,  -12, -3
                DW -70,    0, -3
                DW -69,   12, -3
                DW -66,   24, -3
                DW -61,   35, -3
                DW -54,   45, -3
                DW -45,   54, -3
                DW -35,   61, -3
                DW -24,   66, -3
                DW -12,   69, -3
                DW   0,   70, -3
                DW  12,   69, -3
                DW  24,   66, -3
                DW  35,   61, -3
                DW  45,   54, -3
                DW  54,   45, -3
                DW  61,   35, -3
                DW  66,   24, -3
                DW  69,   12, -3
                DW  70,    0, -3

                DW  69,  -12, 3
                DW  66,  -24, 3
                DW  61,  -35, 3
                DW  54,  -45, 3
                DW  45,  -54, 3
                DW  35,  -61, 3
                DW  24,  -66, 3
                DW  12,  -69, 3
                DW   0,  -70, 3
                DW -12,  -69, 3
                DW -24,  -66, 3
                DW -35,  -61, 3
                DW -45,  -54, 3
                DW -54,  -45, 3
                DW -61,  -35, 3
                DW -66,  -24, 3
                DW -69,  -12, 3
                DW -70,    0, 3
                DW -69,   12, 3
                DW -66,   24, 3
                DW -61,   35, 3
                DW -54,   45, 3
                DW -45,   54, 3
                DW -35,   61, 3
                DW -24,   66, 3
                DW -12,   69, 3
                DW   0,   70, 3
                DW  12,   69, 3
                DW  24,   66, 3
                DW  35,   61, 3
                DW  45,   54, 3
                DW  54,   45, 3
                DW  61,   35, 3
                DW  66,   24, 3
                DW  69,   12, 3
                DW  70,    0, 3

                DW  49,   -9, -60
                DW  47,  -17, -60
                DW  43,  -25, -60
                DW  38,  -32, -60
                DW  32,  -38, -60
                DW  25,  -43, -60
                DW  17,  -47, -60
                DW   9,  -49, -60
                DW   0,  -50, -60
                DW  -9,  -49, -60
                DW -17,  -47, -60
                DW -25,  -43, -60
                DW -32,  -38, -60
                DW -38,  -32, -60
                DW -43,  -25, -60
                DW -47,  -17, -60
                DW -49,   -9, -60
                DW -50,    0, -60
                DW -49,    9, -60
                DW -47,   17, -60
                DW -43,   25, -60
                DW -38,   32, -60
                DW -32,   38, -60
                DW -25,   43, -60
                DW -17,   47, -60
                DW  -9,   49, -60
                DW   0,   50, -60
                DW   9,   49, -60
                DW  17,   47, -60
                DW  25,   43, -60
                DW  32,   38, -60
                DW  38,   32, -60
                DW  43,   25, -60
                DW  47,   17, -60
                DW  49,    9, -60
                DW  50,    0, -60


                DB  36                          ;NumOfPolys
                DB  01, 04, 108, 109, 37, 36
                DB  01, 04, 110, 111, 39, 38
                DB  01, 04, 112, 113, 41, 40
                DB  01, 04, 114, 115, 43, 42
                DB  01, 04, 116, 117, 45, 44
                DB  01, 04, 118, 119, 47, 46
                DB  01, 04, 120, 121, 49, 48
                DB  01, 04, 122, 123, 51, 50
                DB  01, 04, 124, 125, 53, 52
                DB  01, 04, 126, 127, 55, 54
                DB  01, 04, 128, 129, 57, 56
                DB  01, 04, 130, 131, 59, 58
                DB  01, 04, 132, 133, 61, 60
                DB  01, 04, 134, 135, 63, 62
                DB  01, 04, 136, 137, 65, 64
                DB  01, 04, 138, 139, 67, 66
                DB  01, 04, 140, 141, 69, 68
                DB  01, 04, 142, 143, 71, 70

                DB  01, 04, 01, 02, 74, 73
                DB  01, 04, 03, 04, 76, 75
                DB  01, 04, 05, 06, 78, 77
                DB  01, 04, 07, 08, 80, 79
                DB  01, 04, 09, 10, 82, 81
                DB  01, 04, 11, 12, 84, 83
                DB  01, 04, 13, 14, 86, 85
                DB  01, 04, 15, 16, 88, 87
                DB  01, 04, 17, 18, 90, 89
                DB  01, 04, 19, 20, 92, 91
                DB  01, 04, 21, 22, 94, 93
                DB  01, 04, 23, 24, 96, 95
                DB  01, 04, 25, 26, 98, 97
                DB  01, 04, 27, 28, 100, 99
                DB  01, 04, 29, 30, 102, 101
                DB  01, 04, 31, 32, 104, 103
                DB  01, 04, 33, 34, 106, 105
                DB  01, 04, 35, 00, 72, 107

Object4         DW -1000, 0000, 1300             ;The original pos in X, Y, Z
                DW 0000, 0000, 0000             ;The current calculated pos
                DW 0000, 0000, 0000             ;The current object angle
                DB 00, 00, 00                   ;Angle to rotate each frame
                DW 0000, 0045, 0000             ;The current internal angle
                DB 00, 00, 05                   ;Angle to rotate each frame

                DB 144                           ;NumOfPoints
                DW  49,   -9, 60
                DW  47,  -17, 60
                DW  43,  -25, 60
                DW  38,  -32, 60
                DW  32,  -38, 60
                DW  25,  -43, 60
                DW  17,  -47, 60
                DW   9,  -49, 60
                DW   0,  -50, 60
                DW  -9,  -49, 60
                DW -17,  -47, 60
                DW -25,  -43, 60
                DW -32,  -38, 60
                DW -38,  -32, 60
                DW -43,  -25, 60
                DW -47,  -17, 60
                DW -49,   -9, 60
                DW -50,    0, 60
                DW -49,    9, 60
                DW -47,   17, 60
                DW -43,   25, 60
                DW -38,   32, 60
                DW -32,   38, 60
                DW -25,   43, 60
                DW -17,   47, 60
                DW  -9,   49, 60
                DW   0,   50, 60
                DW   9,   49, 60
                DW  17,   47, 60
                DW  25,   43, 60
                DW  32,   38, 60
                DW  38,   32, 60
                DW  43,   25, 60
                DW  47,   17, 60
                DW  49,    9, 60
                DW  50,    0, 60

                DW  69,  -12, -3
                DW  66,  -24, -3
                DW  61,  -35, -3
                DW  54,  -45, -3
                DW  45,  -54, -3
                DW  35,  -61, -3
                DW  24,  -66, -3
                DW  12,  -69, -3
                DW   0,  -70, -3
                DW -12,  -69, -3
                DW -24,  -66, -3
                DW -35,  -61, -3
                DW -45,  -54, -3
                DW -54,  -45, -3
                DW -61,  -35, -3
                DW -66,  -24, -3
                DW -69,  -12, -3
                DW -70,    0, -3
                DW -69,   12, -3
                DW -66,   24, -3
                DW -61,   35, -3
                DW -54,   45, -3
                DW -45,   54, -3
                DW -35,   61, -3
                DW -24,   66, -3
                DW -12,   69, -3
                DW   0,   70, -3
                DW  12,   69, -3
                DW  24,   66, -3
                DW  35,   61, -3
                DW  45,   54, -3
                DW  54,   45, -3
                DW  61,   35, -3
                DW  66,   24, -3
                DW  69,   12, -3
                DW  70,    0, -3

                DW  69,  -12, 3
                DW  66,  -24, 3
                DW  61,  -35, 3
                DW  54,  -45, 3
                DW  45,  -54, 3
                DW  35,  -61, 3
                DW  24,  -66, 3
                DW  12,  -69, 3
                DW   0,  -70, 3
                DW -12,  -69, 3
                DW -24,  -66, 3
                DW -35,  -61, 3
                DW -45,  -54, 3
                DW -54,  -45, 3
                DW -61,  -35, 3
                DW -66,  -24, 3
                DW -69,  -12, 3
                DW -70,    0, 3
                DW -69,   12, 3
                DW -66,   24, 3
                DW -61,   35, 3
                DW -54,   45, 3
                DW -45,   54, 3
                DW -35,   61, 3
                DW -24,   66, 3
                DW -12,   69, 3
                DW   0,   70, 3
                DW  12,   69, 3
                DW  24,   66, 3
                DW  35,   61, 3
                DW  45,   54, 3
                DW  54,   45, 3
                DW  61,   35, 3
                DW  66,   24, 3
                DW  69,   12, 3
                DW  70,    0, 3

                DW  49,   -9, -60
                DW  47,  -17, -60
                DW  43,  -25, -60
                DW  38,  -32, -60
                DW  32,  -38, -60
                DW  25,  -43, -60
                DW  17,  -47, -60
                DW   9,  -49, -60
                DW   0,  -50, -60
                DW  -9,  -49, -60
                DW -17,  -47, -60
                DW -25,  -43, -60
                DW -32,  -38, -60
                DW -38,  -32, -60
                DW -43,  -25, -60
                DW -47,  -17, -60
                DW -49,   -9, -60
                DW -50,    0, -60
                DW -49,    9, -60
                DW -47,   17, -60
                DW -43,   25, -60
                DW -38,   32, -60
                DW -32,   38, -60
                DW -25,   43, -60
                DW -17,   47, -60
                DW  -9,   49, -60
                DW   0,   50, -60
                DW   9,   49, -60
                DW  17,   47, -60
                DW  25,   43, -60
                DW  32,   38, -60
                DW  38,   32, -60
                DW  43,   25, -60
                DW  47,   17, -60
                DW  49,    9, -60
                DW  50,    0, -60


                DB  36                          ;NumOfPolys
                DB  04, 04, 108, 109, 37, 36
                DB  04, 04, 110, 111, 39, 38
                DB  04, 04, 112, 113, 41, 40
                DB  04, 04, 114, 115, 43, 42
                DB  04, 04, 116, 117, 45, 44
                DB  04, 04, 118, 119, 47, 46
                DB  04, 04, 120, 121, 49, 48
                DB  04, 04, 122, 123, 51, 50
                DB  04, 04, 124, 125, 53, 52
                DB  04, 04, 126, 127, 55, 54
                DB  04, 04, 128, 129, 57, 56
                DB  04, 04, 130, 131, 59, 58
                DB  04, 04, 132, 133, 61, 60
                DB  04, 04, 134, 135, 63, 62
                DB  04, 04, 136, 137, 65, 64
                DB  04, 04, 138, 139, 67, 66
                DB  04, 04, 140, 141, 69, 68
                DB  04, 04, 142, 143, 71, 70

                DB  04, 04, 01, 02, 74, 73
                DB  04, 04, 03, 04, 76, 75
                DB  04, 04, 05, 06, 78, 77
                DB  04, 04, 07, 08, 80, 79
                DB  04, 04, 09, 10, 82, 81
                DB  04, 04, 11, 12, 84, 83
                DB  04, 04, 13, 14, 86, 85
                DB  04, 04, 15, 16, 88, 87
                DB  04, 04, 17, 18, 90, 89
                DB  04, 04, 19, 20, 92, 91
                DB  04, 04, 21, 22, 94, 93
                DB  04, 04, 23, 24, 96, 95
                DB  04, 04, 25, 26, 98, 97
                DB  04, 04, 27, 28, 100, 99
                DB  04, 04, 29, 30, 102, 101
                DB  04, 04, 31, 32, 104, 103
                DB  04, 04, 33, 34, 106, 105
                DB  04, 04, 35, 00, 72, 107

Object5         DW 0000, 0256, -150             ;The original pos in X, Y, Z
                DW 0000, 0000, 0000             ;The current calculated pos
                DW 0000, 0000, 0000             ;The current object angle
                DB 00, 00, 00                   ;Angle to rotate each frame
                DW 0090, 0000, 0010             ;The current internal angle
                DB 00, 04, 00                   ;Angle to rotate each frame

                DB 97                          ;NumOfPoints
                DW 1,1,1                         ;Itj vrr kuk i rv

                DW  52,  -30, -10                ;Ytterste sirkel nederst
                DW  30,  -52, -10
                DW   0,  -60, -10
                DW -30,  -52, -10
                DW -52,  -30, -10
                DW -60,    0, -10
                DW -52,   30, -10
                DW -30,   52, -10
                DW   0,   60, -10
                DW  30,   52, -10
                DW  52,   30, -10
                DW  60,    0, -10


                DW  52,  -30, 10                ;Ytterste sirkel verst
                DW  30,  -52, 10
                DW   0,  -60, 10
                DW -30,  -52, 10
                DW -52,  -30, 10
                DW -60,    0, 10
                DW -52,   30, 10
                DW -30,   52, 10
                DW   0,   60, 10
                DW  30,   52, 10
                DW  52,   30, 10
                DW  60,    0, 10


                DW  39,  -22, 25                ;verste sirkel ytterst
                DW  23,  -39, 25
                DW   0,  -45, 25
                DW -22,  -39, 25
                DW -39,  -23, 25
                DW -45,    0, 25
                DW -39,   22, 25
                DW -23,   39, 25
                DW   0,   45, 25
                DW  23,   39, 25
                DW  39,   23, 25
                DW  45,    0, 25


                DW  22,  -12, 25                ;verste sirkel innerst
                DW  13,  -22, 25
                DW   0,  -25, 25
                DW -12,  -22, 25
                DW -22,  -13, 25
                DW -25,    0, 25
                DW -22,   12, 25
                DW -13,   22, 25
                DW   0,   25, 25
                DW  13,   22, 25
                DW  22,   13, 25
                DW  25,    0, 25

                DW   9,   -5, 10                ;Innerste sirkel verst
                DW   5,   -9, 10
                DW   0,  -10, 10
                DW  -5,   -9, 10
                DW  -9,   -5, 10
                DW -10,    0, 10
                DW  -9,    5, 10
                DW  -5,    9, 10
                DW   0,   10, 10
                DW   5,    9, 10
                DW   9,    5, 10
                DW  10,    0, 10

                DW   9,   -5,-10                ;Innerste sirkel nederst
                DW   5,   -9,-10
                DW   0,  -10,-10
                DW  -5,   -9,-10
                DW  -9,   -5,-10
                DW -10,    0,-10
                DW  -9,    5,-10
                DW  -5,    9,-10
                DW   0,   10,-10
                DW   5,    9,-10
                DW   9,    5,-10
                DW  10,    0,-10

                DW  22,  -12,-25                ;Nederste sirkel innerst
                DW  13,  -22,-25
                DW   0,  -25,-25
                DW -12,  -22,-25
                DW -22,  -13,-25
                DW -25,    0,-25
                DW -22,   12,-25
                DW -13,   22,-25
                DW   0,   25,-25
                DW  13,   22,-25
                DW  22,   13,-25
                DW  25,    0,-25

                DW  39,  -22,-25                ;Nederste sirkel ytterst
                DW  23,  -39,-25
                DW   0,  -45,-25
                DW -22,  -39,-25
                DW -39,  -23,-25
                DW -45,    0,-25
                DW -39,   22,-25
                DW -23,   39,-25
                DW   0,   45,-25
                DW  23,   39,-25
                DW  39,   23,-25
                DW  45,    0,-25


                 ;666
                DB 96                          ;NumOfPolys
                DB  128, 4, 1,13, 14, 2                  ;1
                DB  128, 4, 2,14, 15, 3
                DB  128, 4, 3,15, 16,  4
                DB  128, 4, 4,16, 17,  5
                DB  128, 4, 5,17, 18,  6
                DB  128, 4, 6,18, 19,  7
                DB  128, 4, 7,19, 20,  8
                DB  128, 4, 8,20, 21,  9
                DB  128, 4, 9,21, 22, 10
                DB  128, 4,10,22, 23, 11
                DB  128, 4,11,23, 24, 12
                DB  128, 4,12,24, 13,  1
                DB  128, 4,13,25, 26, 14                 ;2
                DB  128, 4,14,26, 27, 15
                DB  128, 4,15,27, 28, 16
                DB  128, 4,16,28, 29, 17
                DB  128, 4,17,29, 30, 18
                DB  128, 4,18,30, 31, 19
                DB  128, 4,19,31, 32, 20
                DB  128, 4,20,32, 33, 21
                DB  128, 4,21,33, 34, 22
                DB  128, 4,22,34, 35, 23
                DB  128, 4,23,35, 36, 24
                DB  128, 4,24,36, 25, 13
                DB  128, 4,25,37, 38, 26                 ;3
                DB  128, 4,26,38, 39, 27
                DB  128, 4,27,39, 40, 28
                DB  128, 4,28,40, 41, 29
                DB  128, 4,29,41, 42, 30
                DB  128, 4,30,42, 43, 31
                DB  128, 4,31,43, 44, 32
                DB  128, 4,32,44, 45, 33
                DB  128, 4,33,45, 46, 34
                DB  128, 4,34,46, 47, 35
                DB  128, 4,35,47, 48, 36
                DB  128, 4,36,48, 37, 25
                DB  128, 4,37,49, 50, 38                 ;4
                DB  128, 4,38,50, 51, 39
                DB  128, 4,39,51, 52, 40
                DB  128, 4,40,52, 53, 41
                DB  128, 4,41,53, 54, 42
                DB  128, 4,42,54, 55, 43
                DB  128, 4,43,55, 56, 44
                DB  128, 4,44,56, 57, 45
                DB  128, 4,45,57, 58, 46
                DB  128, 4,46,58, 59, 47
                DB  128, 4,47,59, 60, 48
                DB  128, 4,48,60, 49, 37
                DB  128, 4,49,61, 62, 50                 ;5
                DB  128, 4,50,62, 63, 51
                DB  128, 4,51,63, 64, 52
                DB  128, 4,52,64, 65, 53
                DB  128, 4,53,65, 66, 54
                DB  128, 4,54,66, 67, 55
                DB  128, 4,55,67, 68, 56
                DB  128, 4,56,68, 69, 57
                DB  128, 4,57,69, 70, 58
                DB  128, 4,58,70, 71, 59
                DB  128, 4,59,71, 72, 60
                DB  128, 4,60,72, 61, 49
                DB  128, 4,61,73, 74, 62                  ;6
                DB  128, 4,62,74, 75, 63
                DB  128, 4,63,75, 76, 64
                DB  128, 4,64,76, 77, 65
                DB  128, 4,65,77, 78, 66
                DB  128, 4,66,78, 79, 67
                DB  128, 4,67,79, 80, 68
                DB  128, 4,68,80, 81, 69
                DB  128, 4,69,81, 82, 70
                DB  128, 4,70,82, 83, 71
                DB  128, 4,71,83, 84, 72
                DB  128, 4,72,84, 73, 61
                DB  128, 4,73,85, 86, 74                 ;7
                DB  128, 4,74,86, 87, 75
                DB  128, 4,75,87, 88, 76
                DB  128, 4,76,88, 89, 77
                DB  128, 4,77,89, 90, 78
                DB  128, 4,78,90, 91, 79
                DB  128, 4,79,91, 92, 80
                DB  128, 4,80,92, 93, 81
                DB  128, 4,81,93, 94, 82
                DB  128, 4,82,94, 95, 83
                DB  128, 4,83,95, 96, 84
                DB  128, 4,84,96, 85, 73
                DB  128, 4,85, 1,  2, 86                 ;8
                DB  128, 4,86, 2,  3, 87
                DB  128, 4,87, 3,  4, 88
                DB  128, 4,88, 4,  5, 89
                DB  128, 4,89, 5,  6, 90
                DB  128, 4,90, 6,  7, 91
                DB  128, 4,91, 7,  8, 92
                DB  128, 4,92, 8,  9, 93
                DB  128, 4,93, 9, 10, 94
                DB  128, 4,94,10, 11, 95
                DB  128, 4,95,11, 12, 96
                DB  128, 4,96,12,  1, 85

Object6         DW 0000h, 0000h,  -130          ;The original pos in X, Y, Z
                DW 0000h, 0000h, 0000h          ;The current calculated pos
                DW 0000h, 0000h, 0000h          ;The current object pos/angle
                DB 00, 00, 00                   ;Angle to rotate each frame
                DW 0034, 0100, 0240             ;The angle on the three axis
                DB 01h, 02h, 01h                ;Angle to rotate each frame

                DB 144                          ;NumOfPoints
                DW  69,  -12, -10              ;Nederste sirkel, ytre
                DW  66,  -24, -10              ;Radius = 70
                DW  61,  -35, -10
                DW  54,  -45, -10
                DW  45,  -54, -10
                DW  35,  -61, -10
                DW  24,  -66, -10
                DW  12,  -69, -10
                DW   0,  -70, -10
                DW -12,  -69, -10
                DW -24,  -66, -10
                DW -35,  -61, -10
                DW -45,  -54, -10
                DW -54,  -45, -10
                DW -61,  -35, -10
                DW -66,  -24, -10
                DW -69,  -12, -10
                DW -70,    0, -10
                DW -69,   12, -10
                DW -66,   24, -10
                DW -61,   35, -10
                DW -54,   45, -10
                DW -45,   54, -10
                DW -35,   61, -10
                DW -24,   66, -10
                DW -12,   69, -10
                DW   0,   70, -10
                DW  12,   69, -10
                DW  24,   66, -10
                DW  35,   61, -10
                DW  45,   54, -10
                DW  54,   45, -10
                DW  61,   35, -10
                DW  66,   24, -10
                DW  69,   12, -10
                DW  70,    0, -10

                DW  69,  -12, 10               ;Oeverste sirkel, ytre
                DW  66,  -24, 10
                DW  61,  -35, 10
                DW  54,  -45, 10
                DW  45,  -54, 10
                DW  35,  -61, 10
                DW  24,  -66, 10
                DW  12,  -69, 10
                DW   0,  -70, 10
                DW -12,  -69, 10
                DW -24,  -66, 10
                DW -35,  -61, 10
                DW -45,  -54, 10
                DW -54,  -45, 10
                DW -61,  -35, 10
                DW -66,  -24, 10
                DW -69,  -12, 10
                DW -70,    0, 10
                DW -69,   12, 10
                DW -66,   24, 10
                DW -61,   35, 10
                DW -54,   45, 10
                DW -45,   54, 10
                DW -35,   61, 10
                DW -24,   66, 10
                DW -12,   69, 10
                DW   0,   70, 10
                DW  12,   69, 10
                DW  24,   66, 10
                DW  35,   61, 10
                DW  45,   54, 10
                DW  54,   45, 10
                DW  61,   35, 10
                DW  66,   24, 10
                DW  69,   12, 10
                DW  70,    0, 10

                DW  59,  -10, -10               ;Innerste sirkel, nedre
                DW  56,  -21, -10
                DW  52,  -30, -10
                DW  46,  -39, -10
                DW  39,  -46, -10
                DW  30,  -52, -10
                DW  21,  -56, -10
                DW  10,  -59, -10
                DW   0,  -60, -10
                DW -10,  -59, -10
                DW -21,  -56, -10
                DW -30,  -52, -10
                DW -39,  -46, -10
                DW -46,  -39, -10
                DW -52,  -30, -10
                DW -56,  -21, -10
                DW -59,  -10, -10
                DW -60,    0, -10
                DW -59,   10, -10
                DW -56,   21, -10
                DW -52,   30, -10
                DW -46,   39, -10
                DW -39,   46, -10
                DW -30,   52, -10
                DW -21,   56, -10
                DW -10,   59, -10
                DW   0,   60, -10
                DW  10,   59, -10
                DW  21,   56, -10
                DW  30,   52, -10
                DW  39,   46, -10
                DW  46,   39, -10
                DW  52,   30, -10
                DW  56,   21, -10
                DW  59,   10, -10
                DW  60,    0, -10

                DW  59,  -10, 10                ;Innerste sirkel, vre
                DW  56,  -21, 10
                DW  52,  -30, 10
                DW  46,  -39, 10
                DW  39,  -46, 10
                DW  30,  -52, 10
                DW  21,  -56, 10
                DW  10,  -59, 10
                DW   0,  -60, 10
                DW -10,  -59, 10
                DW -21,  -56, 10
                DW -30,  -52, 10
                DW -39,  -46, 10
                DW -46,  -39, 10
                DW -52,  -30, 10
                DW -56,  -21, 10
                DW -59,  -10, 10
                DW -60,    0, 10
                DW -59,   10, 10
                DW -56,   21, 10
                DW -52,   30, 10
                DW -46,   39, 10
                DW -39,   46, 10
                DW -30,   52, 10
                DW -21,   56, 10
                DW -10,   59, 10
                DW   0,   60, 10
                DW  10,   59, 10
                DW  21,   56, 10
                DW  30,   52, 10
                DW  39,   46, 10
                DW  46,   39, 10
                DW  52,   30, 10
                DW  56,   21, 10
                DW  59,   10, 10
                DW  60,    0, 10

                DB 144                          ;NumOfPolys
                DB 65, 4, 36, 37, 01, 00       ;Ytre sirkel
                DB 65, 4, 37, 38, 02, 01
                DB 65, 4, 38, 39, 03, 02
                DB 65, 4, 39, 40, 04, 03
                DB 65, 4, 40, 41, 05, 04
                DB 65, 4, 41, 42, 06, 05
                DB 65, 4, 42, 43, 07, 06
                DB 65, 4, 43, 44, 08, 07
                DB 65, 4, 44, 45, 09, 08
                DB 65, 4, 45, 46, 10, 09
                DB 65, 4, 46, 47, 11, 10
                DB 65, 4, 47, 48, 12, 11
                DB 65, 4, 48, 49, 13, 12
                DB 65, 4, 49, 50, 14, 13
                DB 65, 4, 50, 51, 15, 14
                DB 65, 4, 51, 52, 16, 15
                DB 65, 4, 52, 53, 17, 16
                DB 65, 4, 53, 54, 18, 17
                DB 65, 4, 54, 55, 19, 18
                DB 65, 4, 55, 56, 20, 19
                DB 65, 4, 56, 57, 21, 20
                DB 65, 4, 57, 58, 22, 21
                DB 65, 4, 58, 59, 23, 22
                DB 65, 4, 59, 60, 24, 23
                DB 65, 4, 60, 61, 25, 24
                DB 65, 4, 61, 62, 26, 25
                DB 65, 4, 62, 63, 27, 26
                DB 65, 4, 63, 64, 28, 27
                DB 65, 4, 64, 65, 29, 28
                DB 65, 4, 65, 66, 30, 29
                DB 65, 4, 66, 67, 31, 30
                DB 65, 4, 67, 68, 32, 31
                DB 65, 4, 68, 69, 33, 32
                DB 65, 4, 69, 70, 34, 33
                DB 65, 4, 70, 71, 35, 34
                DB 65, 4, 71, 36, 00, 35

                DB 65, 4, 72, 73, 109, 108      ;Innerste sirkel
                DB 65, 4, 73, 74, 110, 109
                DB 65, 4, 74, 75, 111, 110
                DB 65, 4, 75, 76, 112, 111
                DB 65, 4, 76, 77, 113, 112
                DB 65, 4, 77, 78, 114, 113
                DB 65, 4, 78, 79, 115, 114
                DB 65, 4, 79, 80, 116, 115
                DB 65, 4, 80, 81, 117, 116
                DB 65, 4, 81, 82, 118, 117
                DB 65, 4, 82, 83, 119, 118
                DB 65, 4, 83, 84, 120, 119
                DB 65, 4, 84, 85, 121, 120
                DB 65, 4, 85, 86, 122, 121
                DB 65, 4, 86, 87, 123, 122
                DB 65, 4, 87, 88, 124, 123
                DB 65, 4, 88, 89, 125, 124
                DB 65, 4, 89, 90, 126, 125
                DB 65, 4, 90, 91, 127, 126
                DB 65, 4, 91, 92, 128, 127
                DB 65, 4, 92, 93, 129, 128
                DB 65, 4, 93, 94, 130, 129
                DB 65, 4, 94, 95, 131, 130
                DB 65, 4, 95, 96, 132, 131
                DB 65, 4, 96, 97, 133, 132
                DB 65, 4, 97, 98, 134, 133
                DB 65, 4, 98, 99, 135, 134
                DB 65, 4, 99, 100, 136, 135
                DB 65, 4, 100, 101, 137, 136
                DB 65, 4, 101, 102, 138, 137
                DB 65, 4, 102, 103, 139, 138
                DB 65, 4, 103, 104, 140, 139
                DB 65, 4, 104, 105, 141, 140
                DB 65, 4, 105, 106, 142, 141
                DB 65, 4, 106, 107, 143, 142
                DB 65, 4, 107, 72, 108, 143

                DB 65, 4, 00, 01, 73, 72        ;Nederste side
                DB 65, 4, 01, 02, 74, 73
                DB 65, 4, 02, 03, 75, 74
                DB 65, 4, 03, 04, 76, 75
                DB 65, 4, 04, 05, 77, 76
                DB 65, 4, 05, 06, 78, 77
                DB 65, 4, 06, 07, 79, 78
                DB 65, 4, 07, 08, 80, 79
                DB 65, 4, 08, 09, 81, 80
                DB 65, 4, 09, 10, 82, 81
                DB 65, 4, 10, 11, 83, 82
                DB 65, 4, 11, 12, 84, 83
                DB 65, 4, 12, 13, 85, 84
                DB 65, 4, 13, 14, 86, 85
                DB 65, 4, 14, 15, 87, 86
                DB 65, 4, 15, 16, 88, 87
                DB 65, 4, 16, 17, 89, 88
                DB 65, 4, 17, 18, 90, 89
                DB 65, 4, 18, 19, 91, 90
                DB 65, 4, 19, 20, 92, 91
                DB 65, 4, 20, 21, 93, 92
                DB 65, 4, 21, 22, 94, 93
                DB 65, 4, 22, 23, 95, 94
                DB 65, 4, 23, 24, 96, 95
                DB 65, 4, 24, 25, 97, 96
                DB 65, 4, 25, 26, 98, 97
                DB 65, 4, 26, 27, 99, 98
                DB 65, 4, 27, 28, 100, 99
                DB 65, 4, 28, 29, 101, 100
                DB 65, 4, 29, 30, 102, 101
                DB 65, 4, 30, 31, 103, 102
                DB 65, 4, 31, 32, 104, 103
                DB 65, 4, 32, 33, 105, 104
                DB 65, 4, 33, 34, 106, 105
                DB 65, 4, 34, 35, 107, 106
                DB 65, 4, 35, 00, 72, 107

                DB 65, 4, 108, 109, 37, 36        ;verste side
                DB 65, 4, 109, 110, 38, 37
                DB 65, 4, 110, 111, 39, 38
                DB 65, 4, 111, 112, 40, 39
                DB 65, 4, 112, 113, 41, 40
                DB 65, 4, 113, 114, 42, 41
                DB 65, 4, 114, 115, 43, 42
                DB 65, 4, 115, 116, 44, 43
                DB 65, 4, 116, 117, 45, 44
                DB 65, 4, 117, 118, 46, 45
                DB 65, 4, 118, 119, 47, 46
                DB 65, 4, 119, 120, 48, 47
                DB 65, 4, 120, 121, 49, 48
                DB 65, 4, 121, 122, 50, 49
                DB 65, 4, 122, 123, 51, 50
                DB 65, 4, 123, 124, 52, 51
                DB 65, 4, 124, 125, 53, 52
                DB 65, 4, 125, 126, 54, 53
                DB 65, 4, 126, 127, 55, 54
                DB 65, 4, 127, 128, 56, 55
                DB 65, 4, 128, 129, 57, 56
                DB 65, 4, 129, 130, 58, 57
                DB 65, 4, 130, 131, 59, 58
                DB 65, 4, 131, 132, 60, 59
                DB 65, 4, 132, 133, 61, 60
                DB 65, 4, 133, 134, 62, 61
                DB 65, 4, 134, 135, 63, 62
                DB 65, 4, 135, 136, 64, 63
                DB 65, 4, 136, 137, 65, 64
                DB 65, 4, 137, 138, 66, 65
                DB 65, 4, 138, 139, 67, 66
                DB 65, 4, 139, 140, 68, 67
                DB 65, 4, 140, 141, 69, 68
                DB 65, 4, 141, 142, 70, 69
                DB 65, 4, 142, 143, 71, 70
                DB 65, 4, 143, 108, 36, 71

Object7         DW 0000, 0000, -130          ;The original pos in X, Y, Z
                DW 0000, 0000, 0000          ;The current calculated pos
                DW 0000, 0000, 0000          ;The current object
                DB 00, 00, 00                   ;Angle to rotate each frame
                DW 0000h, 0000h, 0000h          ;The angle on the three axis
                DB 04, 03, 02                ;Angle to rotate each frame

                DB 144                          ;NumOfPoints
                DW  49,   -9, -10               ;Nederste sirkel, ytre
                DW  47,  -17, -10               ;Radius = 50
                DW  43,  -25, -10
                DW  38,  -32, -10
                DW  32,  -38, -10
                DW  25,  -43, -10
                DW  17,  -47, -10
                DW   9,  -49, -10
                DW   0,  -50, -10
                DW  -9,  -49, -10
                DW -17,  -47, -10
                DW -25,  -43, -10
                DW -32,  -38, -10
                DW -38,  -32, -10
                DW -43,  -25, -10
                DW -47,  -17, -10
                DW -49,   -9, -10
                DW -50,    0, -10
                DW -49,    9, -10
                DW -47,   17, -10
                DW -43,   25, -10
                DW -38,   32, -10
                DW -32,   38, -10
                DW -25,   43, -10
                DW -17,   47, -10
                DW  -9,   49, -10
                DW   0,   50, -10
                DW   9,   49, -10
                DW  17,   47, -10
                DW  25,   43, -10
                DW  32,   38, -10
                DW  38,   32, -10
                DW  43,   25, -10
                DW  47,   17, -10
                DW  49,    9, -10
                DW  50,    0, -10

                DW  49,   -9, 10               ;verste sirkel, ytre
                DW  47,  -17, 10               ;Radius = 50
                DW  43,  -25, 10
                DW  38,  -32, 10
                DW  32,  -38, 10
                DW  25,  -43, 10
                DW  17,  -47, 10
                DW   9,  -49, 10
                DW   0,  -50, 10
                DW  -9,  -49, 10
                DW -17,  -47, 10
                DW -25,  -43, 10
                DW -32,  -38, 10
                DW -38,  -32, 10
                DW -43,  -25, 10
                DW -47,  -17, 10
                DW -49,   -9, 10
                DW -50,    0, 10
                DW -49,    9, 10
                DW -47,   17, 10
                DW -43,   25, 10
                DW -38,   32, 10
                DW -32,   38, 10
                DW -25,   43, 10
                DW -17,   47, 10
                DW  -9,   49, 10
                DW   0,   50, 10
                DW   9,   49, 10
                DW  17,   47, 10
                DW  25,   43, 10
                DW  32,   38, 10
                DW  38,   32, 10
                DW  43,   25, 10
                DW  47,   17, 10
                DW  49,    9, 10
                DW  50,    0, 10

                DW  39,   -7, -10               ;Innerste sirkel, nedre
                DW  38,  -14, -10               ;Radius = 40
                DW  35,  -20, -10
                DW  31,  -26, -10
                DW  26,  -31, -10
                DW  20,  -35, -10
                DW  14,  -38, -10
                DW   7,  -39, -10
                DW   0,  -40, -10
                DW  -7,  -39, -10
                DW -14,  -38, -10
                DW -20,  -35, -10
                DW -26,  -31, -10
                DW -31,  -26, -10
                DW -35,  -20, -10
                DW -38,  -14, -10
                DW -39,   -7, -10
                DW -40,    0, -10
                DW -39,    7, -10
                DW -38,   14, -10
                DW -35,   20, -10
                DW -31,   26, -10
                DW -26,   31, -10
                DW -20,   35, -10
                DW -14,   38, -10
                DW  -7,   39, -10
                DW   0,   40, -10
                DW   7,   39, -10
                DW  14,   38, -10
                DW  20,   35, -10
                DW  26,   31, -10
                DW  31,   26, -10
                DW  35,   20, -10
                DW  38,   14, -10
                DW  39,    7, -10
                DW  40,    0, -10

                DW  39,   -7, 10               ;Innerste sirkel, nedre
                DW  38,  -14, 10               ;Radius = 40
                DW  35,  -20, 10
                DW  31,  -26, 10
                DW  26,  -31, 10
                DW  20,  -35, 10
                DW  14,  -38, 10
                DW   7,  -39, 10
                DW   0,  -40, 10
                DW  -7,  -39, 10
                DW -14,  -38, 10
                DW -20,  -35, 10
                DW -26,  -31, 10
                DW -31,  -26, 10
                DW -35,  -20, 10
                DW -38,  -14, 10
                DW -39,   -7, 10
                DW -40,    0, 10
                DW -39,    7, 10
                DW -38,   14, 10
                DW -35,   20, 10
                DW -31,   26, 10
                DW -26,   31, 10
                DW -20,   35, 10
                DW -14,   38, 10
                DW  -7,   39, 10
                DW   0,   40, 10
                DW   7,   39, 10
                DW  14,   38, 10
                DW  20,   35, 10
                DW  26,   31, 10
                DW  31,   26, 10
                DW  35,   20, 10
                DW  38,   14, 10
                DW  39,    7, 10
                DW  40,    0, 10

                DB 144                          ;NumOfPolys
                DB 132, 4, 36, 37, 01, 00       ;Ytre sirkel
                DB 132, 4, 37, 38, 02, 01
                DB 132, 4, 38, 39, 03, 02
                DB 132, 4, 39, 40, 04, 03
                DB 132, 4, 40, 41, 05, 04
                DB 132, 4, 41, 42, 06, 05
                DB 132, 4, 42, 43, 07, 06
                DB 132, 4, 43, 44, 08, 07
                DB 132, 4, 44, 45, 09, 08
                DB 132, 4, 45, 46, 10, 09
                DB 132, 4, 46, 47, 11, 10
                DB 132, 4, 47, 48, 12, 11
                DB 132, 4, 48, 49, 13, 12
                DB 132, 4, 49, 50, 14, 13
                DB 132, 4, 50, 51, 15, 14
                DB 132, 4, 51, 52, 16, 15
                DB 132, 4, 52, 53, 17, 16
                DB 132, 4, 53, 54, 18, 17
                DB 132, 4, 54, 55, 19, 18
                DB 132, 4, 55, 56, 20, 19
                DB 132, 4, 56, 57, 21, 20
                DB 132, 4, 57, 58, 22, 21
                DB 132, 4, 58, 59, 23, 22
                DB 132, 4, 59, 60, 24, 23
                DB 132, 4, 60, 61, 25, 24
                DB 132, 4, 61, 62, 26, 25
                DB 132, 4, 62, 63, 27, 26
                DB 132, 4, 63, 64, 28, 27
                DB 132, 4, 64, 65, 29, 28
                DB 132, 4, 65, 66, 30, 29
                DB 132, 4, 66, 67, 31, 30
                DB 132, 4, 67, 68, 32, 31
                DB 132, 4, 68, 69, 33, 32
                DB 132, 4, 69, 70, 34, 33
                DB 132, 4, 70, 71, 35, 34
                DB 132, 4, 71, 36, 00, 35

                DB 132, 4, 72, 73, 109, 108      ;Innerste sirkel
                DB 132, 4, 73, 74, 110, 109
                DB 132, 4, 74, 75, 111, 110
                DB 132, 4, 75, 76, 112, 111
                DB 132, 4, 76, 77, 113, 112
                DB 132, 4, 77, 78, 114, 113
                DB 132, 4, 78, 79, 115, 114
                DB 132, 4, 79, 80, 116, 115
                DB 132, 4, 80, 81, 117, 116
                DB 132, 4, 81, 82, 118, 117
                DB 132, 4, 82, 83, 119, 118
                DB 132, 4, 83, 84, 120, 119
                DB 132, 4, 84, 85, 121, 120
                DB 132, 4, 85, 86, 122, 121
                DB 132, 4, 86, 87, 123, 122
                DB 132, 4, 87, 88, 124, 123
                DB 132, 4, 88, 89, 125, 124
                DB 132, 4, 89, 90, 126, 125
                DB 132, 4, 90, 91, 127, 126
                DB 132, 4, 91, 92, 128, 127
                DB 132, 4, 92, 93, 129, 128
                DB 132, 4, 93, 94, 130, 129
                DB 132, 4, 94, 95, 131, 130
                DB 132, 4, 95, 96, 132, 131
                DB 132, 4, 96, 97, 133, 132
                DB 132, 4, 97, 98, 134, 133
                DB 132, 4, 98, 99, 135, 134
                DB 132, 4, 99, 100, 136, 135
                DB 132, 4, 100, 101, 137, 136
                DB 132, 4, 101, 102, 138, 137
                DB 132, 4, 102, 103, 139, 138
                DB 132, 4, 103, 104, 140, 139
                DB 132, 4, 104, 105, 141, 140
                DB 132, 4, 105, 106, 142, 141
                DB 132, 4, 106, 107, 143, 142
                DB 132, 4, 107, 72, 108, 143

                DB 132, 4, 00, 01, 73, 72        ;Nederste side
                DB 132, 4, 01, 02, 74, 73
                DB 132, 4, 02, 03, 75, 74
                DB 132, 4, 03, 04, 76, 75
                DB 132, 4, 04, 05, 77, 76
                DB 132, 4, 05, 06, 78, 77
                DB 132, 4, 06, 07, 79, 78
                DB 132, 4, 07, 08, 80, 79
                DB 132, 4, 08, 09, 81, 80
                DB 132, 4, 09, 10, 82, 81
                DB 132, 4, 10, 11, 83, 82
                DB 132, 4, 11, 12, 84, 83
                DB 132, 4, 12, 13, 85, 84
                DB 132, 4, 13, 14, 86, 85
                DB 132, 4, 14, 15, 87, 86
                DB 132, 4, 15, 16, 88, 87
                DB 132, 4, 16, 17, 89, 88
                DB 132, 4, 17, 18, 90, 89
                DB 132, 4, 18, 19, 91, 90
                DB 132, 4, 19, 20, 92, 91
                DB 132, 4, 20, 21, 93, 92
                DB 132, 4, 21, 22, 94, 93
                DB 132, 4, 22, 23, 95, 94
                DB 132, 4, 23, 24, 96, 95
                DB 132, 4, 24, 25, 97, 96
                DB 132, 4, 25, 26, 98, 97
                DB 132, 4, 26, 27, 99, 98
                DB 132, 4, 27, 28, 100, 99
                DB 132, 4, 28, 29, 101, 100
                DB 132, 4, 29, 30, 102, 101
                DB 132, 4, 30, 31, 103, 102
                DB 132, 4, 31, 32, 104, 103
                DB 132, 4, 32, 33, 105, 104
                DB 132, 4, 33, 34, 106, 105
                DB 132, 4, 34, 35, 107, 106
                DB 132, 4, 35, 00, 72, 107

                DB 132, 4, 108, 109, 37, 36        ;verste side
                DB 132, 4, 109, 110, 38, 37
                DB 132, 4, 110, 111, 39, 38
                DB 132, 4, 111, 112, 40, 39
                DB 132, 4, 112, 113, 41, 40
                DB 132, 4, 113, 114, 42, 41
                DB 132, 4, 114, 115, 43, 42
                DB 132, 4, 115, 116, 44, 43
                DB 132, 4, 116, 117, 45, 44
                DB 132, 4, 117, 118, 46, 45
                DB 132, 4, 118, 119, 47, 46
                DB 132, 4, 119, 120, 48, 47
                DB 132, 4, 120, 121, 49, 48
                DB 132, 4, 121, 122, 50, 49
                DB 132, 4, 122, 123, 51, 50
                DB 132, 4, 123, 124, 52, 51
                DB 132, 4, 124, 125, 53, 52
                DB 132, 4, 125, 126, 54, 53
                DB 132, 4, 126, 127, 55, 54
                DB 132, 4, 127, 128, 56, 55
                DB 132, 4, 128, 129, 57, 56
                DB 132, 4, 129, 130, 58, 57
                DB 132, 4, 130, 131, 59, 58
                DB 132, 4, 131, 132, 60, 59
                DB 132, 4, 132, 133, 61, 60
                DB 132, 4, 133, 134, 62, 61
                DB 132, 4, 134, 135, 63, 62
                DB 132, 4, 135, 136, 64, 63
                DB 132, 4, 136, 137, 65, 64
                DB 132, 4, 137, 138, 66, 65
                DB 132, 4, 138, 139, 67, 66
                DB 132, 4, 139, 140, 68, 67
                DB 132, 4, 140, 141, 69, 68
                DB 132, 4, 141, 142, 70, 69
                DB 132, 4, 142, 143, 71, 70
                DB 132, 4, 143, 108, 36, 71

Object8         DW 0000, 0000, -130          ;The original pos in X, Y, Z
                DW 0000, 0000, 0000          ;The current calculated pos
                DW 0000, 0000, 0000          ;The current object
                DB 00, 00, 00                   ;Angle to rotate each frame
                DW 0000h, 0000h, 0000h          ;The angle on the three axis
                DB 02h, 03h, 00h                ;Angle to rotate each frame

                DB 144                          ;NumOfPoints
                DW  30,   -5, -5               ;Nederste sirkel, ytre
                DW  28,  -10, -5               ;Radius = 30
                DW  26,  -15, -5
                DW  23,  -19, -5
                DW  19,  -23, -5
                DW  15,  -26, -5
                DW  10,  -28, -5
                DW   5,  -30, -5
                DW   0,  -30, -5
                DW  -5,  -30, -5
                DW -10,  -28, -5
                DW -15,  -26, -5
                DW -19,  -23, -5
                DW -23,  -19, -5
                DW -26,  -15, -5
                DW -28,  -10, -5
                DW -30,   -5, -5
                DW -30,    0, -5
                DW -30,    5, -5
                DW -28,   10, -5
                DW -26,   15, -5
                DW -23,   19, -5
                DW -19,   23, -5
                DW -15,   26, -5
                DW -10,   28, -5
                DW  -5,   30, -5
                DW   0,   30, -5
                DW   5,   30, -5
                DW  10,   28, -5
                DW  15,   26, -5
                DW  19,   23, -5
                DW  23,   19, -5
                DW  26,   15, -5
                DW  28,   10, -5
                DW  30,    5, -5
                DW  30,    0, -5

                DW  30,   -5, 5               ;verste sirkel, ytre
                DW  28,  -10, 5               ;Radius = 30
                DW  26,  -15, 5
                DW  23,  -19, 5
                DW  19,  -23, 5
                DW  15,  -26, 5
                DW  10,  -28, 5
                DW   5,  -30, 5
                DW   0,  -30, 5
                DW  -5,  -30, 5
                DW -10,  -28, 5
                DW -15,  -26, 5
                DW -19,  -23, 5
                DW -23,  -19, 5
                DW -26,  -15, 5
                DW -28,  -10, 5
                DW -30,   -5, 5
                DW -30,    0, 5
                DW -30,    5, 5
                DW -28,   10, 5
                DW -26,   15, 5
                DW -23,   19, 5
                DW -19,   23, 5
                DW -15,   26, 5
                DW -10,   28, 5
                DW  -5,   30, 5
                DW   0,   30, 5
                DW   5,   30, 5
                DW  10,   28, 5
                DW  15,   26, 5
                DW  19,   23, 5
                DW  23,   19, 5
                DW  26,   15, 5
                DW  28,   10, 5
                DW  30,    5, 5
                DW  30,    0, 5

                DW  20,   -3, -5               ;Nederste sirkel, indre
                DW  19,   -7, -5               ;Radius = 20
                DW  17,  -10, -5
                DW  15,  -13, -5
                DW  13,  -15, -5
                DW  10,  -17, -5
                DW   7,  -19, -5
                DW   3,  -20, -5
                DW   0,  -20, -5
                DW  -3,  -20, -5
                DW  -7,  -19, -5
                DW -10,  -17, -5
                DW -13,  -15, -5
                DW -15,  -13, -5
                DW -17,  -10, -5
                DW -19,   -7, -5
                DW -20,   -3, -5
                DW -20,    0, -5
                DW -20,    3, -5
                DW -19,    7, -5
                DW -17,   10, -5
                DW -15,   13, -5
                DW -13,   15, -5
                DW -10,   17, -5
                DW  -7,   19, -5
                DW  -3,   20, -5
                DW   0,   20, -5
                DW   3,   20, -5
                DW   7,   19, -5
                DW  10,   17, -5
                DW  13,   15, -5
                DW  15,   13, -5
                DW  17,   10, -5
                DW  19,    7, -5
                DW  20,    3, -5
                DW  20,    0, -5

                DW  20,   -3, 5               ;Nederste sirkel, indre
                DW  19,   -7, 5               ;Radius = 20
                DW  17,  -10, 5
                DW  15,  -13, 5
                DW  13,  -15, 5
                DW  10,  -17, 5
                DW   7,  -19, 5
                DW   3,  -20, 5
                DW   0,  -20, 5
                DW  -3,  -20, 5
                DW  -7,  -19, 5
                DW -10,  -17, 5
                DW -13,  -15, 5
                DW -15,  -13, 5
                DW -17,  -10, 5
                DW -19,   -7, 5
                DW -20,   -3, 5
                DW -20,    0, 5
                DW -20,    3, 5
                DW -19,    7, 5
                DW -17,   10, 5
                DW -15,   13, 5
                DW -13,   15, 5
                DW -10,   17, 5
                DW  -7,   19, 5
                DW  -3,   20, 5
                DW   0,   20, 5
                DW   3,   20, 5
                DW   7,   19, 5
                DW  10,   17, 5
                DW  13,   15, 5
                DW  15,   13, 5
                DW  17,   10, 5
                DW  19,    7, 5
                DW  20,    3, 5
                DW  20,    0, 5

                DB 144                          ;NumOfPolys
                DB 166, 4, 36, 37, 01, 00       ;Ytre sirkel
                DB 166, 4, 37, 38, 02, 01
                DB 166, 4, 38, 39, 03, 02
                DB 166, 4, 39, 40, 04, 03
                DB 166, 4, 40, 41, 05, 04
                DB 166, 4, 41, 42, 06, 05
                DB 166, 4, 42, 43, 07, 06
                DB 166, 4, 43, 44, 08, 07
                DB 166, 4, 44, 45, 09, 08
                DB 166, 4, 45, 46, 10, 09
                DB 166, 4, 46, 47, 11, 10
                DB 166, 4, 47, 48, 12, 11
                DB 166, 4, 48, 49, 13, 12
                DB 166, 4, 49, 50, 14, 13
                DB 166, 4, 50, 51, 15, 14
                DB 166, 4, 51, 52, 16, 15
                DB 166, 4, 52, 53, 17, 16
                DB 166, 4, 53, 54, 18, 17
                DB 166, 4, 54, 55, 19, 18
                DB 166, 4, 55, 56, 20, 19
                DB 166, 4, 56, 57, 21, 20
                DB 166, 4, 57, 58, 22, 21
                DB 166, 4, 58, 59, 23, 22
                DB 166, 4, 59, 60, 24, 23
                DB 166, 4, 60, 61, 25, 24
                DB 166, 4, 61, 62, 26, 25
                DB 166, 4, 62, 63, 27, 26
                DB 166, 4, 63, 64, 28, 27
                DB 166, 4, 64, 65, 29, 28
                DB 166, 4, 65, 66, 30, 29
                DB 166, 4, 66, 67, 31, 30
                DB 166, 4, 67, 68, 32, 31
                DB 166, 4, 68, 69, 33, 32
                DB 166, 4, 69, 70, 34, 33
                DB 166, 4, 70, 71, 35, 34
                DB 166, 4, 71, 36, 00, 35

                DB 166, 4, 72, 73, 109, 108      ;Innerste sirkel
                DB 166, 4, 73, 74, 110, 109
                DB 166, 4, 74, 75, 111, 110
                DB 166, 4, 75, 76, 112, 111
                DB 166, 4, 76, 77, 113, 112
                DB 166, 4, 77, 78, 114, 113
                DB 166, 4, 78, 79, 115, 114
                DB 166, 4, 79, 80, 116, 115
                DB 166, 4, 80, 81, 117, 116
                DB 166, 4, 81, 82, 118, 117
                DB 166, 4, 82, 83, 119, 118
                DB 166, 4, 83, 84, 120, 119
                DB 166, 4, 84, 85, 121, 120
                DB 166, 4, 85, 86, 122, 121
                DB 166, 4, 86, 87, 123, 122
                DB 166, 4, 87, 88, 124, 123
                DB 166, 4, 88, 89, 125, 124
                DB 166, 4, 89, 90, 126, 125
                DB 166, 4, 90, 91, 127, 126
                DB 166, 4, 91, 92, 128, 127
                DB 166, 4, 92, 93, 129, 128
                DB 166, 4, 93, 94, 130, 129
                DB 166, 4, 94, 95, 131, 130
                DB 166, 4, 95, 96, 132, 131
                DB 166, 4, 96, 97, 133, 132
                DB 166, 4, 97, 98, 134, 133
                DB 166, 4, 98, 99, 135, 134
                DB 166, 4, 99, 100, 136, 135
                DB 166, 4, 100, 101, 137, 136
                DB 166, 4, 101, 102, 138, 137
                DB 166, 4, 102, 103, 139, 138
                DB 166, 4, 103, 104, 140, 139
                DB 166, 4, 104, 105, 141, 140
                DB 166, 4, 105, 106, 142, 141
                DB 166, 4, 106, 107, 143, 142
                DB 166, 4, 107, 72, 108, 143

                DB 166, 4, 00, 01, 73, 72        ;Nederste side
                DB 166, 4, 01, 02, 74, 73
                DB 166, 4, 02, 03, 75, 74
                DB 166, 4, 03, 04, 76, 75
                DB 166, 4, 04, 05, 77, 76
                DB 166, 4, 05, 06, 78, 77
                DB 166, 4, 06, 07, 79, 78
                DB 166, 4, 07, 08, 80, 79
                DB 166, 4, 08, 09, 81, 80
                DB 166, 4, 09, 10, 82, 81
                DB 166, 4, 10, 11, 83, 82
                DB 166, 4, 11, 12, 84, 83
                DB 166, 4, 12, 13, 85, 84
                DB 166, 4, 13, 14, 86, 85
                DB 166, 4, 14, 15, 87, 86
                DB 166, 4, 15, 16, 88, 87
                DB 166, 4, 16, 17, 89, 88
                DB 166, 4, 17, 18, 90, 89
                DB 166, 4, 18, 19, 91, 90
                DB 166, 4, 19, 20, 92, 91
                DB 166, 4, 20, 21, 93, 92
                DB 166, 4, 21, 22, 94, 93
                DB 166, 4, 22, 23, 95, 94
                DB 166, 4, 23, 24, 96, 95
                DB 166, 4, 24, 25, 97, 96
                DB 166, 4, 25, 26, 98, 97
                DB 166, 4, 26, 27, 99, 98
                DB 166, 4, 27, 28, 100, 99
                DB 166, 4, 28, 29, 101, 100
                DB 166, 4, 29, 30, 102, 101
                DB 166, 4, 30, 31, 103, 102
                DB 166, 4, 31, 32, 104, 103
                DB 166, 4, 32, 33, 105, 104
                DB 166, 4, 33, 34, 106, 105
                DB 166, 4, 34, 35, 107, 106
                DB 166, 4, 35, 00, 72, 107

                DB 166, 4, 108, 109, 37, 36        ;verste side
                DB 166, 4, 109, 110, 38, 37
                DB 166, 4, 110, 111, 39, 38
                DB 166, 4, 111, 112, 40, 39
                DB 166, 4, 112, 113, 41, 40
                DB 166, 4, 113, 114, 42, 41
                DB 166, 4, 114, 115, 43, 42
                DB 166, 4, 115, 116, 44, 43
                DB 166, 4, 116, 117, 45, 44
                DB 166, 4, 117, 118, 46, 45
                DB 166, 4, 118, 119, 47, 46
                DB 166, 4, 119, 120, 48, 47
                DB 166, 4, 120, 121, 49, 48
                DB 166, 4, 121, 122, 50, 49
                DB 166, 4, 122, 123, 51, 50
                DB 166, 4, 123, 124, 52, 51
                DB 166, 4, 124, 125, 53, 52
                DB 166, 4, 125, 126, 54, 53
                DB 166, 4, 126, 127, 55, 54
                DB 166, 4, 127, 128, 56, 55
                DB 166, 4, 128, 129, 57, 56
                DB 166, 4, 129, 130, 58, 57
                DB 166, 4, 130, 131, 59, 58
                DB 166, 4, 131, 132, 60, 59
                DB 166, 4, 132, 133, 61, 60
                DB 166, 4, 133, 134, 62, 61
                DB 166, 4, 134, 135, 63, 62
                DB 166, 4, 135, 136, 64, 63
                DB 166, 4, 136, 137, 65, 64
                DB 166, 4, 137, 138, 66, 65
                DB 166, 4, 138, 139, 67, 66
                DB 166, 4, 139, 140, 68, 67
                DB 166, 4, 140, 141, 69, 68
                DB 166, 4, 141, 142, 70, 69
                DB 166, 4, 142, 143, 71, 70
                DB 166, 4, 143, 108, 36, 71

Tmp             DW 0

Dbg             DW 200

MyData        ENDS

;----------------------- UNINITIALIZED DATA SEGMENT --------------------------
UnIntData     SEGMENT                           ;Uninitialized data

TempCoords      DB MaxPoints * 6 DUP (?)      ;6 bytes for XYZ-coords
PolyList        DB (((7*2) + 2) + (MaxVertices * 4) * MaxPolys) DUP (?)
PolySort        DB (2 + (MaxVertices * 4)) * MaxPolys DUP (?)
Palette2        DB 768 DUP (?)
Image           DB 96 * 96 DUP (?)              ;The picture to rotate

UnIntData     ENDS

MyCode        SEGMENT
.386

Initialize    PROC
                mov  ax, MyData                ;Point ds to data-segment
                mov  ds, ax
                mov  gs, ax

                mov  ax, UnIntData             ;Point fs to the ?-datasegment
                mov  fs, ax

                mov  ax, Canvas
                mov  es, ax

                mov  al, 13h                   ;320x200x256
                mov  ah, 00h                   ;set screenmode
                int  10h

                mov   dx,3C8h                   ;Port to send out startingcolor
                xor   al,al                     ;Starting color = 0
                out   dx, al                    ;Poek det ut!
                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette
                mov   cx,768                    ;3*256 (RGB)=768 colors
                rep   outsb

                mov   si, OFFSET Palette2
                mov   cx, 192
                mov   eax, 3F3F3F3Fh
;                xor   eax, eax
WhiteLoop :
                mov   fs:[si], eax
                add   si, 4
                loop  WhiteLoop

                ret
Initialize    ENDP


;----------------------------------------------------------------------------
;A procedure which manages the calculating of the points.
;si = OFFSET Object
;----------------------------------------------------------------------------

Rotation      PROC
                mov   bp, si                    ;Point to the objects angles
                add   si, 30
                mov   di, OFFSET TempCoords
                xor   cx, cx
                mov   cl, [si]                  ;Load NumOfPoints
                inc   si                        ;Point to the coords

RotateLoop :
                push  cx                        ;Save counter

                mov   ax, [si]                  ;Load X
                mov   bx, [si + 2]              ;Load Y
                mov   cx, [si + 4]              ;Load Z
                add   si, 6

                push  si
                push  di

                mov   dx, ds:[bp + 21]           ;Load internal XAngle,
                mov   si, ds:[bp + 23]           ;YAngle and
                mov   di, ds:[bp + 25]          ;ZAngle

                sal   ax, 2
                sal   bx, 2
                sal   cx, 2
                call  Rotate                    ;Rotate the coordinates
                sar   ax, 2
                sar   bx, 2
                sar   cx, 2

                pop   di
                pop   si

                add   ax, ds:[bp + 6]               ;Move objects position
                add   bx, ds:[bp + 8]
                add   cx, ds:[bp + 10]

                mov   fs:[di], ax               ;Put the calculated X,
                mov   fs:[di+2], bx             ;Y
                mov   fs:[di+4], cx             ;and Z coords in TempCoords
                add   di, 6                     ;Point to next record

                pop   cx                        ;Restore counter
                loop  RotateLoop                ;Next coordinate

                ret
Rotation      ENDP

;If this procedure is called right after Rotate, si will point to ds:NumOfPolys
;and no calculating of si is needed.

;Structure :
;      Info                             OFFSET  SIZE
;---------------------------------------------------
;Offset to next Polygon                 0       2
;MinX (smallest X coord in the poly)    2       2
;MaxX (largest X coord in the poly)     4       2
;MinY                                   6       2
;MaxY                                   8       2
;MinZ                                   10      2
;MaxZ                                   12      2
;Number of vertices in poly (n)         14      1
;Vertice-coordinates in X, Y            15      n * 4


StoreRawPolys PROC
                push  es

                mov   ax, UnIntData
                mov   es, ax

                mov   dx, di

                xor   cx, cx
                mov   cl, [si]                  ;Load NumOfPolys
                inc   si                        ;Point to first poly

RPolyLoop :
                push  cx

                mov   cx, [si]                  ;Load col and num of vertices
                add   si, 2                     ;Point to vertices

                mov   es:[di], cx               ;Save col and NumOfVertices
                add   di, 2                     ;Move pointer
                mov   cl, ch
                xor   ch, ch

VerticeRLoop :
                push  cx
                xor   ax, ax
                lodsb                           ;Load verticenumber
                mov   bx, ax
                shl   ax, 2                     ;Multiply by 6 because each
                shl   bx, 1                     ;record contains 6 bytes
                add   bx, ax

                mov   bp, OFFSET TempCoords
                add   bp, bx                    ;Point to the right record
                mov   ax, fs:[bp]               ;Load X
                mov   bx, fs:[bp + 2]           ;Load Y
                mov   cx, fs:[bp + 4]           ;Load Z

                add   cx, 400
                sar   cx, 1
                call  F3DTo2D

                add   ax, 160                   ;Move to center of screen
                add   bx, 100                   ;/

                mov   es:[di], ax
                mov   es:[di + 2], bx
                add   di, 4

                pop   cx
                dec   cx
                jnz   VerticeRLoop               ;Loop for each vertice

                pop   cx
                dec   cx
                jnz   RPolyLoop                  ;Loop for each polygon
                mov   dx, di
                pop   es
                ret                             ;Go home!
StoreRawPolys ENDP

StorePolys    PROC
                push  es

                mov   ax, UnIntData
                mov   es, ax

                mov   dx, di

                xor   cx, cx
                mov   cl, [si]                  ;Load NumOfPolys
                inc   si                        ;Point to first poly

PolyLoop :
                push  cx

                mov   Tmp, dx
                mov   dx, di                    ;Save PolyList-pointer
                add   di, 2

                mov   ax,  32767                ;MinX
                stosw
                mov   ax, -32768                ;MaxX
                stosw
                mov   ax,  32767                ;MinY
                stosw                           ;Give dummy-values
                mov   ax, -32768                ;MaxY
                stosw
                mov   ax,  32767                ;MinZ
                stosw
                mov   ax, -32768                ;MaxZ
                stosw

                mov   cx, [si]                  ;Load col and num of vertices
                add   si, 2                     ;Point to vertices

                mov   es:[di], cx               ;Save col and NumOfVertices
                add   di, 2                        ;Move pointer
                xchg  ch, cl
                xor   ch, ch

VerticeLoop :
                push  cx
                xor   ax, ax
                lodsb                           ;Load verticenumber
                mov   bx, ax
                shl   ax, 2                     ;Multiply by 6 because each
                shl   bx, 1                     ;record contains 6 bytes
                add   bx, ax

                mov   bp, OFFSET TempCoords
                add   bp, bx                    ;Point to the right record
                mov   ax, fs:[bp]               ;Load X
                mov   bx, fs:[bp + 2]           ;Load Y
                mov   cx, fs:[bp + 4]           ;Load Z


;------ Here goes the testing to find the max and min of the three axis ------

                xchg  dx, di
                cmp   ax, es:[di + 2]           ;Testing MinX
                jge   TestMaxX
                mov   es:[di + 2], ax
TestMaxX :
                cmp   ax, es:[di + 4]           ;Testing MaxX
                jle   TestMinY
                mov   es:[di + 4], ax
TestMinY :
                cmp   bx, es:[di + 6]           ;Testing MinY
                jge   TestMaxY
                mov   es:[di + 6], bx
TestMaxY :
                cmp   bx, es:[di + 8]           ;Testing MaxY
                jle   TestMinZ
                mov   es:[di + 8], bx
TestMinZ :
                cmp   cx, es:[di + 10]          ;Testing MinZ
                jge   TestMaxZ
                mov   es:[di + 10], cx
TestMaxZ :
                cmp   cx, es:[di + 12]          ;Testing MaxZ
                jle   DoneTesting
                mov   es:[di + 12], cx
DoneTesting :                                   ;Done testing max and min
                xchg  di, dx

                add   cx, 400
                sar   cx, 1
                call  F3DTo2D

                add   ax, 160                   ;Move to center of screen
                add   bx, 100                   ;/

                mov   es:[di], ax
                mov   es:[di + 2], bx
                add   di, 4

                pop   cx
                dec   cx
                jnz   VerticeLoop               ;Loop for each vertice

                mov   ax, di                    ;Current offset = next poly
                mov   di, dx                    ;Point to offset-word
                mov   es:[di], ax               ;Save it
                mov   di, ax

                push  si

                mov   si, dx                    ;Point to the poly-record
                add   si, 16                    ;Point to the coordinates

                call  Visible                   ;Call backface-removal
                cmp   ax, 0                     ;Test if poly is visible
                jl    PolyOK                    ;If not, drop it!
                mov   di, dx                    ;Overwrite polygon
;                mov   dx, Tmp
PolyOK :
                push  di
                neg   ax
                mov   cl, LSShift
                sar   ax, cl
                mov   di, dx
                add   di, 14
                add   es:[di], al
                pop   di
                pop   si

                pop   cx
                dec   cx
                jnz   PolyLoop                  ;Loop for each polygon

                pop   es
                ret                             ;Go home!
StorePolys    ENDP


SortPolys     PROC
                mov   ax, UnIntData
                mov   es, ax
                mov   ds, ax

                mov   cx, OFFSET PolyList
                mov   di, OFFSET PolySort

SortLoop :
                mov   si, cx
                mov   bx, cx
                mov   ax, -32768

                push  cx

ListLoop :
                mov   dx, [si + 12]              ;Load poly largest Z-coord
                cmp   dx, ax
                jle   Nearer
                mov   ax, dx
                mov   bp, cx
                mov   bx, si

Nearer :
                mov   cx, si
                mov   si, [si]
                cmp   si, 0
                jne   ListLoop                  ;Loop for sorting each poly

                pop   cx
                mov   dx, [bx]
                mov   es:[bp], dx

                cmp   bp, bx
                jne   ListStart
                mov   cx, [bx]
ListStart :

                push  si
                push  cx
                mov   si, bx                    ;Point to the sorted poly
                add   si, 14                    ;Point to the coordinates
                mov   cx, [si]                  ;Load Col and NumOfPoints
                mov   es:[di], cx               ;Save Col and NumOfPoints
                xchg  ch, cl
                xor   ch, ch
                add   di, 2                        ;Point to coords
                add   si, 2                        ;Point to coords
                rep   movsd                     ;Transfer coordinates
                pop   cx
                pop   si

                cmp   dx, 0
                jne   SortLoop

                cmp   si, cx
                jne   SortLoop

                mov   WORD PTR [di], 0FFFFh

                mov   ax, MyData
                mov   ds, ax
                mov   ax, Canvas
                mov   es, ax

                ret
SortPolys     ENDP

DrawGlens     PROC
                mov   si, OFFSET PolySort

GlensLoop :
                xor   ax, ax
                mov   al, fs:[si]                    ;Color
                cmp   al, 0FFh
                je    DoneGlens
                mov   bp, ax
                inc   si
                call  Gl_Poly
                xor   ax, ax                    ;Zero ah
                mov   al, fs:[si]               ;Load NumOfVertices
                shl   ax, 2                     ;2*2 = 4 bytes
                inc   si                        ;Dump NumOfVertices
                add   si, ax                    ;Point to next polygon
                jmp   GlensLoop

DoneGlens :
                ret                             ;Go home
DrawGlens     ENDP

DrawFilled    PROC
                mov   si, OFFSET PolySort

FilledLoop :
                xor   ax, ax
                mov   al, fs:[si]                    ;Color
                cmp   al, 0FFh
                je    DoneFilled
                mov   bp, ax
                inc   si
                call  Cl_Poly
                xor   ax, ax                    ;Zero ah
                mov   al, fs:[si]               ;Load NumOfVertices
                shl   ax, 2                     ;2*2 = 4 bytes
                inc   si                        ;Dump NumOfVertices
                add   si, ax                    ;Point to next polygon
                jmp   FilledLoop

DoneFilled :
                ret                             ;Go home
DrawFilled     ENDP

Main          PROC

;------------------------ Start music -------------------------------------

    mov     ah, 4Ah                     ;Shrink program memory for more free
    mov     bx, 03000h                   ;Keep 64K of memory
    int     21h

    mov     ax, MyData                   ;Initialize segment registers
    mov     ds, ax

    mov     bx, offset SBMSEFile        ;ds:bx - ASCIIZ filename of MSE to load

    xor     edi, edi                    ;load from offset 0
    mov     eax, 00002010h              ;Set mixer (?!?)
    mov     dx, MSEConfig.BaseIO        ;Base I/O Address of sound card
    mov     ch, byte ptr MSEConfig.IRQ  ;IRQ level of sound card
    mov     cl, byte ptr MSEConfig.DMA  ;DMA channel of sound card

    call    LoadMSE                     ;Load the MSE file
    or      ax, ax                      ;Was there an error loading the MSE?
    jz      @2                          ;Skip over error if none
;-------
    mov     bx, ax
    dec     bx
    shl     bx, 1                       ;Multiply by two for table
    mov     dx, [MSEErrorTable+bx]      ;Get offset of correct error message
    mov     ah, 9                       ;Display error message
    int     21h
    jmp     MusicFuck                   ;Return to DOS
;-------
@2:
    mov     ax, MyData
    mov     es, ax
LoadModule:
    mov     ax, 3D00h                   ;Open module for read only
    mov     dx, offset ModFile
    int     21h
    jnc     @3

    mov     ah, 9                       ;Display error message
    mov     dx, offset CantFindFile
    int     21h

    mov     dx, offset ModFile
    int     21h
    mov     dx, offset CRLF
    int     21h

    jmp     MusicFuck                        ;Return to dos
;-------
@3: mov     Temp, ax                    ;save file handle

    mov     ah, 9h
    mov     dx, Offset SayLoadModule    ;Display message that we're loading
    int     21h

    mov     dx, Offset ModFile
    int     21h
    mov     dx, offset CRLF
    int     21h
;-------
    call    EmsExist                    ;Find out if EMS memory exists
    and     al, 1                       ;Only keep bit 0
    mov     bl, al                      ;Set load flags

    mov     ax, Temp                    ;File Handle to load from
    xor     ecx, ecx                    ;File offest to load from: 0
    mov     dx, ds
    mov     di, offset ModHead
    call    LoadGDM

    push    bx
    mov     ah, 3Eh                     ;Close module file handle
    mov     bx, Temp
    int     21h
    pop     bx

    or      bl, bl
    jz      @4

    movzx   bx, bl
    dec     bx
    shl     bx, 1                       ;Multiply by two for table
    mov     dx, [GDMErrorTable+bx]      ;Get offset of correct error message
    mov     ah, 9                       ;Display error message
    int     21h
    jmp     MusicFuck                        ;Return to DOS
;-------
@4: mov     cx, 32
    mov     bx, offset ModHead.PanMap
    xor     al, al                      ;channel counter set to zero
ChanScanLoop:
    cmp     byte ptr ds:[bx], 0FFh
    je      @5
    inc     al                          ;increment channel counter
@5: inc     bx
    dec     cx
    jnz     ChanScanLoop

    mov     byte ptr Temp, al
    call    StartOutput
    mov     Temp2, ax

    call    StartMusic

;------------------------------------ Works? ----------------------------

DumpMusic:
                call  Initialize

;                jmp   Part2_Done

Loop_Part1 :
                mov   di, OFFSET PolySort
                mov   cx, NumOfObjects
                mov   si, OFFSET ObjectList

P1ObjectLoop :
                lodsw
                push  cx
                push  si
                mov   si, ax

                xor   dx, dx
                mov   dl, [si + 27]
                add   [si + 21], dx
                cmp   WORD PTR [si + 21], 360
                jb    P1IntXReset
                sub   WORD PTR [si + 21], 360
P1IntXReset :

                mov   dl, [si + 28]
                add   [si + 23], dx
                cmp   WORD PTR [si + 23], 360
                jb    P1IntYReset
                sub   WORD PTR [si + 23], 360
P1IntYReset :

                mov   dl, [si + 29]
                add   [si + 25], dx
                cmp   WORD PTR [si + 25], 360
                jb    P1IntZReset
                sub   WORD PTR [si + 25], 360
P1IntZReset :

                push  di
                push  si
                mov   ax, [si]
                mov   bx, [si + 2]
                mov   cx, [si + 4]
                mov   dx, [si + 12]
                mov   di, [si + 16]
                mov   si, [si + 14]

                sal   ax, 2
                sal   bx, 2
                sal   cx, 2
                call  Rotate
                sar   ax, 2
                sar   bx, 2
                sar   cx, 2
                pop   si

                mov   [si + 6], ax
                mov   [si + 8], bx
                mov   [si + 10], cx

                xor   dx, dx
                mov   dl, [si + 18]
                add   [si + 12], dx
                cmp   WORD PTR [si + 12], 360
                jl    P1ObjXReset
                sub   WORD PTR [si + 12], 360
P1ObjXReset :

                mov   dl, [si + 19]
                add   [si + 14], dx
                cmp   WORD PTR [si + 14], 360
                jl    P1ObjYReset
                sub   WORD PTR [si + 14], 360
P1ObjYReset :

                mov   dl, [si + 20]
                add   [si + 16], dx
                cmp   WORD PTR [si + 16], 360
                jl    P1ObjZReset
                sub   WORD PTR [si + 16], 360
P1ObjZReset :
                call  Rotation

                pop   di
                call  StoreRawPolys

                pop   si
                pop   cx
                dec   cx
                jnz   P1ObjectLoop

                mov   di, dx
                mov   WORD PTR fs:[di], 0FFFFh

                xor   di, di                    ;Blank the canvas...
                mov   eax, 40404040h                  ;
                mov   cx, 16000                 ;
                rep   stosd                     ;

                call  DrawGlens

                cmp   Flag1, 0                  ;Flytt dingsen nedover
                je    NoAction1

                mov   si, OFFSET Object1
                add   WORD PTR ds:[si + 2], 10
                cmp   WORD PTR ds:[si + 2], 50
                jl    NoAction1
                mov   Flag1, 0
                mov   Flag2, 1
                mov   NumOfObjects, 2
NoAction1 :
                cmp   Flag2, 0                  ;Flytt dingsen opp/bak + roter
                je    NoAction2

                mov   si, OFFSET Object1
                sub   WORD PTR ds:[si + 2], 2
                add   WORD PTR ds:[si + 4], 2
                cmp   WORD PTR ds:[si + 2], 0
                jge    NoAction2
                mov   Flag2, 0
                mov   BYTE PTR ds:[si + 27], 2
                mov   BYTE PTR ds:[si + 28], 1
                mov   BYTE PTR ds:[si + 29], 1
                mov   Flag3, 1
NoAction2 :

                cmp   Flag3, 0                  ;Delay...
                je    NoAction3
                dec   Flag3_C
                jnz    NoAction3
                mov   Flag3, 0
                mov   Flag4, 1

NoAction3 :

                cmp   Flag4, 0                  ;Flytt dings1 ut, og dings2 opp
                je    NoAction4
                mov   si, OFFSET Object2
                sub   WORD PTR ds:[si + 2], 1   ;Flytt opp
                add   WORD PTR ds:[si + 21], 1  ;Roter

                mov   si, OFFSET Object1
                sub   WORD PTR ds:[si], 2
                add   WORD PTR ds:[si + 2], 2
                sub   WORD PTR ds:[si + 4], 3
                cmp   WORD PTR ds:[si], -180
                jg    NoAction4
                mov   Flag4, 0
                mov   Flag5, 1

                mov   NumOfObjects, 1
                mov   si, OFFSET ObjectList
                mov   WORD PTR ds:[si], OFFSET Object2
                mov   si, OFFSET Object2
                mov   BYTE PTR ds:[si + 27], 1
                mov   BYTE PTR ds:[si + 28], 1
                mov   BYTE PTR ds:[si + 29], 1
NoAction4 :

                cmp   Flag5, 0                  ;Delay...
                je    NoAction5
                dec   Flag5_C
                jnz   NoAction5
                mov   Flag5, 0
                mov   Flag6, 1
NoAction5 :


                cmp   Flag6, 0                  ;Vis "Presents"
                je    NoAction6
                dec   Flag6_C
                jnz   ShowPre
                mov   Flag6, 0
                mov   Flag7, 1
                jmp   NoAction6
ShowPre :
                mov   si, OFFSET Presents
                mov   di, 26354
                mov   dx, 37
PreLoop :
                mov   cx, 91
PHorLoop :
                lodsb
                cmp   al, 40h
                je    PNoPix
                mov   es:[di], al
PNoPix :
                inc   di
                loop  PHorLoop
                add   di, 320 - 91
                dec   dx
                jnz   PreLoop
NoAction6 :

                cmp   Flag7, 0                  ;Nok en delay...
                je    NoAction7
                dec   Flag7_C
                jnz   NoAction7
                mov   Flag7, 0
                mov   Flag8, 1

NoAction7 :

                cmp   Flag8, 0                  ;Show "Introen"
                je    NoAction8
                dec   Flag8_C
                jnz    ShowLogo
                mov   Flag20, 1
                mov   si, OFFSET Object2
ShowLogo :

                cmp   Flag8_C, 26
                jl    NoFading

                mov   ax, UnIntData
                mov   ds, ax

                mov   dx,3C8h                   ;Port to send out startingcolor
                xor   al,al                     ;Starting color = 0
                out   dx, al                    ;Poek det ut!
                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette2
                mov   cx,768                    ;3*256 (RGB)=768 colors
                rep   outsb
                mov   si, OFFSET Palette2
                mov   di, OFFSET Palette
                mov   cx, 768
FadeLoop :
                mov   al, [si]
                cmp   al, gs:[di]
                je    NoCFade
                dec   BYTE PTR [si]
NoCFade :
                inc   si
                inc   di
                loop  FadeLoop

                mov   ax, MyData
                mov   ds, ax
NoFading :
                mov   si, OFFSET Logo
                mov   di, 24360
                mov   dx, 63
LogoLoop :
                mov   cx, 225
LHorLoop :
                lodsb
                cmp   al, 0
                je    LNoPix
                mov   es:[di], al
LNoPix :
                inc   di
                loop  LHorLoop
                add   di, 320 - 225
                dec   dx
                jnz   LogoLoop
NoAction8 :

                cmp   Flag20, 0
                je    NoAction20
                dec   Flag20_C
                jnz   NoAction20
                mov   Flag20, 0
                mov   Flag9, 1
NoAction20 :

                cmp   Flag9, 0                  ;Flytt ut logodings
                je    NoAction9
                mov   si, OFFSET Object2
                sub   WORD PTR ds:[si + 2], 1
                add   WORD PTR ds:[si], 1
                cmp   WORD PTR ds:[si], 200
                jb    NoAction9
                mov   Flag9, 0
                mov   Flag10, 1
                mov   bx, 1

NoAction9 :
                cmp   gs:Flag10, 0              ;Splitt logo'n
                je    NoAction10
                mov   ax, 0A000h
                mov   es, ax

                mov   ax, Canvas
                mov   ds, ax

                sub   gs:Flag10_C, 4
                cmp   gs:Flag10_C, 0
                jl    Part1_Done
                mov   bx, 160
                sub   bx, gs:Flag10_C
                mov   si, 22400
                mov   di, 22400
                mov   dx, 100
                cld
SplitLoop :
                add   si, bx
                mov   cx, gs:Flag10_C
                rep   movsb
                mov   ax, gs:Flag10_C
                shl   ax, 1
                mov   cx, 320
                sub   cx, ax
                xor   ax, ax
                rep   stosb
                mov   cx, gs:Flag10_C
                rep   movsb
                add   si, bx
                dec   dx
                jnz   SplitLoop
                call  WaitForRaster
                jmp   NoAction9
NoAction10 :
                call  WaitForRaster

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   si, si
                xor   di, di
                mov   cx, 16000
                rep   movsd

                mov   ax, MyData
                mov   ds, ax
                mov   ax, Canvas
                mov   es, ax

                mov   ah, 0Bh                   ;Check keyboard
                int   21h                       ;
                cmp   al, 00h                   ;Have somebody pressed a key?
                jne   AllDone                   ;OK, go home!
                jmp   Loop_Part1                ;No? Let's do another roll!
Part1_Done :                                    ;Done part one (intro)

;---------------------- Here startes "part 2"... :))) -----------------------
                mov   ax, MyData
                mov   ds, ax
                mov   ax, Canvas
                mov   es, ax
                mov   si, OFFSET ObjectList
                mov   WORD PTR ds:[si], OFFSET Object3
                mov   WORD PTR ds:[si + 2], OFFSET Object4
                mov   NumOfObjects, 1

Loop_Part2 :                                    ;The rotating loop
                xor   di, di                    ;Blank the canvas...
                mov   eax, 70707070h            ;
                mov   cx, 16000                 ;
                rep   stosd                     ;

                mov   di, OFFSET PolySort
                mov   cx, NumOfObjects
                mov   si, OFFSET ObjectList
                cmp   cx, 0
                je    P2NoVectors

P2ObjectLoop :
                lodsw
                push  cx
                push  si
                mov   si, ax

                xor   dx, dx
                mov   dl, [si + 27]
                add   [si + 21], dx
                cmp   WORD PTR [si + 21], 360
                jb    P2IntXReset
                sub   WORD PTR [si + 21], 360
P2IntXReset :

                mov   dl, [si + 28]
                add   [si + 23], dx
                cmp   WORD PTR [si + 23], 360
                jb    P2IntYReset
                sub   WORD PTR [si + 23], 360
P2IntYReset :

                mov   dl, [si + 29]
                add   [si + 25], dx
                cmp   WORD PTR [si + 25], 360
                jb    P2IntZReset
                sub   WORD PTR [si + 25], 360
P2IntZReset :

                push  di
                push  si
                mov   ax, [si]
                mov   bx, [si + 2]
                mov   cx, [si + 4]
                mov   dx, [si + 12]
                mov   di, [si + 16]
                mov   si, [si + 14]

                sal   ax, 2
                sal   bx, 2
                sal   cx, 2
                call  Rotate
                sar   ax, 2
                sar   bx, 2
                sar   cx, 2
                pop   si

                mov   [si + 6], ax
                mov   [si + 8], bx
                mov   [si + 10], cx

                xor   dx, dx
                mov   dl, [si + 18]
                add   [si + 12], dx
                cmp   WORD PTR [si + 12], 360
                jl    P2ObjXReset
                sub   WORD PTR [si + 12], 360
P2ObjXReset :

                mov   dl, [si + 19]
                add   [si + 14], dx
                cmp   WORD PTR [si + 14], 360
                jl    P2ObjYReset
                sub   WORD PTR [si + 14], 360
P2ObjYReset :

                mov   dl, [si + 20]
                add   [si + 16], dx
                cmp   WORD PTR [si + 16], 360
                jl    P2ObjZReset
                sub   WORD PTR [si + 16], 360
P2ObjZReset :
                call  Rotation

                pop   di
                call  StoreRawPolys

                pop   si
                pop   cx
                dec   cx
                jnz   P2ObjectLoop

                mov   di, dx
                mov   WORD PTR fs:[di], 0FFFFh

                call  DrawGlens

P2NoVectors :
                call  WaitForRaster

                cmp   Flag11, 0                 ;Flytt dings1 bakover
                je    NoAction11
                mov   si, OFFSET Object3
                add   WORD PTR [si + 4], 2
                cmp   WORD PTR [si + 4], -50
                jl    NoAction11
                mov   Flag11, 0
                mov   Flag12, 1
                mov   NumOfObjects, 2
                mov   BYTE PTR [si + 27], 1
                mov   BYTE PTR [si + 28], 1
NoAction11 :

                cmp   Flag12, 0                 ;Rull traktorhjulet frem
                je    NoAction12
                mov   si, OFFSET Object4
                sub   WORD PTR [si + 4], 6
                add   WORD PTR [si], 5
                cmp   WORD PTR [si], 180
                jl    NoAction12
                mov   BYTE PTR [si + 18], 1
                mov   BYTE PTR [si + 19], 2
                mov   BYTE PTR [si + 20], 3
                mov   BYTE PTR [si + 27], 1
                mov   BYTE PTR [si + 28], 2
                mov   BYTE PTR [si + 29], 3
                mov   Flag12, 0
                mov   Flag13, 1
NoAction12 :

                cmp   Flag13, 0                 ;Flytt traktoren litt tilbake
                je    NoAction13
                mov   si, OFFSET Object4
                inc   WORD PTR [si + 4]
                sub   WORD PTR [si], 2
                cmp   WORD PTR [si], 80
                jg    NoAction13
                mov   Flag13, 0
                mov   Flag14, 1
NoAction13 :

                cmp   Flag14, 0                 ;Delay...
                je    NoAction14
                dec   Flag14_C
                jnz   NoAction14
                mov   Flag15, 1
NoAction14 :

                cmp   Flag15, 0                 ;Flytt dings1 bak og vekk
                je    NoAction15
                mov   si, OFFSET Object3
                sub   WORD PTR [si], 5
                sub   WORD PTR [si + 2], 10
                add   WORD PTR [si + 4], 50
                cmp   WORD PTR [si + 4], 6000
                jl    NoAction15
                mov   Flag15, 0
                mov   Flag16, 1
                mov   si, OFFSET ObjectList
                mov   WORD PTR [si], OFFSET Object4

                mov   si, OFFSET Object4
                mov   BYTE PTR [si + 18], 0
                mov   BYTE PTR [si + 19], 0
                mov   BYTE PTR [si + 20], 0
                mov   NumOfObjects, 1
NoAction15 :
                cmp   Flag16, 0                 ;Flytt hjul fram og vekk
                je    NoAction16
                mov   si, OFFSET Object4
                sub   WORD PTR [si + 4], 2
                sub   WORD PTR [si], 2
                sub   WORD PTR [si + 2], 3
                cmp   WORD PTR [si + 4], -150
                jg    NoAction16
                mov   Flag16, 0
                mov   Flag17, 1
                mov   NumOfObjects, 0
NoAction16 :

                cmp   Flag17, 0                 ;Skli inn stjernene
                je    NoAction17

                call  StarField2                ;Update starfield.

                sub   StXPos, 4
                cmp   StXPos, 0
                jg    NoAction17
                mov   Flag17, 0
                jmp   Part2_Done
 

NoAction17 :
                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   si, si
                xor   di, di
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax
                mov   ax, Canvas
                mov   es, ax

                mov   ah, 0Bh                   ;Check keyboard
                int   21h                       ;
                cmp   al, 00h                   ;Have somebody pressed a key?
                jne   AllDone                   ;OK, go home!
                jmp   Loop_Part2                ;No? Let's do another roll!
Part2_Done :                                    ;Done part two
;                jmp   AllDone

;---------------------- Here startes "part 3"... :))) -----------------------
                mov   StRX, 1                   ;Get the stars going...
                mov   StRY, 1                   ;/
                mov   StRZ, 1                   ;/
                mov   StSpeed, 15               ;/
                mov   StXPos, 0                 ;/

                mov   si, OFFSET ObjectList     ;Set up the objectlist
                mov   WORD PTR [si], OFFSET Object5
                mov   WORD PTR [si + 2], OFFSET Object4

                mov   NumOfObjects, 1
                mov   Flag21, 1

Loop_Part3 :                                    ;The rotating loop
                xor   di, di                    ;Blank the canvas...
                xor   eax, eax                  ;
                mov   cx, 16000                 ;
                rep   stosd                     ;

                call  StarField2

                mov   di, OFFSET PolyList
                mov   cx, NumOfObjects
                mov   si, OFFSET ObjectList
                cmp   cx, 0
                je    P3NoVectors

P3ObjectLoop :
                lodsw
                push  cx
                push  si
                mov   si, ax

                xor   dx, dx
                mov   dl, [si + 27]
                add   [si + 21], dx
                cmp   WORD PTR [si + 21], 360
                jb    P3IntXReset
                sub   WORD PTR [si + 21], 360
P3IntXReset :

                mov   dl, [si + 28]
                add   [si + 23], dx
                cmp   WORD PTR [si + 23], 360
                jb    P3IntYReset
                sub   WORD PTR [si + 23], 360
P3IntYReset :

                mov   dl, [si + 29]
                add   [si + 25], dx
                cmp   WORD PTR [si + 25], 360
                jb    P3IntZReset
                sub   WORD PTR [si + 25], 360
P3IntZReset :

                push  di
                push  si
                mov   ax, [si]
                mov   bx, [si + 2]
                mov   cx, [si + 4]
                mov   dx, [si + 12]
                mov   di, [si + 16]
                mov   si, [si + 14]

                call  Rotate
                pop   si

                mov   [si + 6], ax
                mov   [si + 8], bx
                mov   [si + 10], cx

                xor   dx, dx
                mov   dl, [si + 18]
                add   [si + 12], dx
                cmp   WORD PTR [si + 12], 360
                jl    P3ObjXReset
                sub   WORD PTR [si + 12], 360
P3ObjXReset :

                mov   dl, [si + 19]
                add   [si + 14], dx
                cmp   WORD PTR [si + 14], 360
                jl    P3ObjYReset
                sub   WORD PTR [si + 14], 360
P3ObjYReset :

                mov   dl, [si + 20]
                add   [si + 16], dx
                cmp   WORD PTR [si + 16], 360
                jl    P3ObjZReset
                sub   WORD PTR [si + 16], 360
P3ObjZReset :
                call  Rotation

                pop   di
                call  StorePolys

                pop   si
                pop   cx
                dec   cx
                jnz   P3ObjectLoop

                mov   di, dx
                mov   WORD PTR fs:[di], 0000h

                call  SortPolys
                call  DrawFilled

P3NoVectors :
                call  WaitForRaster

                xor   ax, ax
                cmp   AngleX, 360               ;Test if the angle is above 360
                jb    AngleXOK                  ;If not, then OK
                sub   AngleX, 360               ;Yes? Well, zero it.
AngleXOK :
                mov   al, StRX
                add   AngleX, ax                 ;Increase the angle

                cmp   AngleY, 360               ;The same as described above
                jb    AngleYOK
                sub   AngleY, 360
AngleYOK :
                mov   al, StRY
                add   AngleY, ax

                cmp   AngleZ, 360               ;The same as described above
                jb    AngleZOK
                sub   AngleZ, 360
AngleZOK :
                mov   al, StRZ
                add   AngleZ, ax

                cmp   Flag21, 0
                je    NoAction21
                mov   si, OFFSET SinTabl
                mov   ax, Flag21_C1
                add   si, ax
                mov   ax, [si]
                mov   bx, 256
                sub   bx, ax
                mov   si, OFFSET Object5
                mov   [si + 2], bx
                cmp   Flag21_C1, 720
                jl    SinZ
                mov   Flag21_C1, 0
SinZ :
                add   Flag21_C1, 2
                cmp   Flag21_C1, 180
                jle   NoAction21

                mov   Flag21, 0
                mov   Flag22, 1
                mov   BYTE PTR [si + 27], 4
                mov   BYTE PTR [si + 28], 3
                mov   BYTE PTR [si + 29], 2
NoAction21 :

                cmp   Flag22, 0
                je    NoAction22
                dec   Flag22_C
                jnz   NoAction22
                mov   Flag22, 0
                mov   Flag23, 1
                mov   si, OFFSET Object5
                mov   BYTE PTR [si + 27], 0
                mov   BYTE PTR [si + 28], 4
                mov   BYTE PTR [si + 29], 0
NoAction22 :

                cmp   Flag23, 0
                je    NoAction23
                mov   si, OFFSET Object5
                sub   WORD PTR [si + 2], 1
                cmp   WORD PTR [si + 2], -200
                jg    NoAction23
                mov   Flag23, 0
                mov   Flag24, 1
NoAction23 :
                cmp   Flag24, 0
                je    NoAction24
                dec   Flag24_C
                jnz   NoAction24
                mov   Flag24, 0
                mov   si, OFFSET ObjectList
                mov   WORD PTR [si], OFFSET Object6
                mov   NumOfObjects, 1
                mov   LSShift, 6
                mov   Flag25, 1
NoAction24 :
                cmp   Flag25, 0
                je    NoAction25
                dec   Flag25_C
                jnz   NoAction25
                mov   Flag25, 0
                mov   si, OFFSET ObjectList + 2
                mov   WORD PTR [si], OFFSET Object7
                mov   NumOfObjects, 2
                mov   Flag26, 1
NoAction25 :
                cmp   Flag26, 0
                je    NoAction26
                dec   Flag26_C
                jnz   NoAction26
                mov   Flag26, 0
                mov   si, OFFSET ObjectList + 4
                mov   WORD PTR [si], OFFSET Object8
                mov   NumOfObjects, 3
                mov   Flag27, 1
NoAction26 :

                cmp   Flag27, 0
                je    NoAction27
                dec   Flag27_C
                jnz   NoAction27
                mov   Flag27, 0
                mov   Flag28, 1
NoAction27 :

                cmp   Flag28, 0
                je    NoAction28
                mov   si, OFFSET Object6
                sub   WORD PTR [si], 1
                mov   si, OFFSET Object7
                sub   WORD PTR [si + 2], 1
                mov   si, OFFSET Object8
                sub   WORD PTR [si + 4], 1
                add   WORD PTR [si], 2
                cmp   WORD PTR [si], 250
                jl    NoAction28
                mov   si, OFFSET ObjectList
                mov   WORD PTR [si], OFFSET Object7
                mov   WORD PTR [si + 2], OFFSET Object8
                mov   NumOfObjects, 0
                mov   Flag28, 0
                mov   Flag29, 1
NoAction28 :
                cmp   Flag29, 0
                je    NoAction29

                mov   ax, UnIntData
                mov   ds, ax

                xor   bx, bx
                mov   si, OFFSET Palette2
                mov   cx, 768
FadeLoop2 :
                cmp   BYTE PTR [si], 0
                je    NoFade2
                mov   bx, 1
                dec   BYTE PTR [si]
NoFade2 :
                inc   si
                loop  FadeLoop2
                cmp   bx, 1
                je    SetPal
                mov   ax, MyData
                mov   ds, ax

                jmp   Part3_Done
SetPal :
                mov   si, OFFSET Palette2
                mov   dx,3C8h                   ;Port to send out startingcolor
                xor   al,al                     ;Starting color = 0
                out   dx, al                    ;Poek det ut!
                inc   dx                        ;Neste port sendes RGB verdiene
                mov   cx,768                    ;3*256 (RGB)=768 colors
                rep   outsb


NoAction29 :

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   si, si
                xor   di, di
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax
                mov   ax, Canvas
                mov   es, ax

                mov   ah, 0Bh                   ;Check keyboard
                int   21h                       ;
                cmp   al, 00h                   ;Have somebody pressed a key?
                jne   AllDone                   ;OK, go home!
                jmp   Loop_Part3                ;No? Let's do another roll!
Part3_Done :                                    ;Done part two

;---------------------- Here startes "part 4"... :)))) -----------------------
                mov   Flag30, 1
                mov   Flag33, 1
                xor   ax, ax                    ;Draw the four tiles
                mov   di, OFFSET Image
                mov   bx, 64
VertLoop :
                mov   cx, 64
                mov   al, ah
HorLoop1 :
                mov   fs:[di], al
                add   al, 16
                inc   di
                loop  HorLoop1

                cmp   ah, 16
                jb    NY
                xor   ah, ah
NY :
                inc   ah
                dec   bx
                jnz   VertLoop                  ;Done drawing tiles

Loop_Part4 :                                    ;Here startes the LOOP
                xor   di, di                    ;Blank the canvas...
                xor   eax, eax                  ;/
                mov   cx, 16000                 ;/
                rep   stosd                     ;/

                cmp   Flag30, 0                 ;----------------- Flag 30
                je    NoAction30
                mov   ax, UnIntData
                mov   ds, ax
MoreMorph1 :
                mov   si, OFFSET Palette2
                mov   di, OFFSET IPal1
                mov   cx, 768
                xor   bx, bx
MorphLoop1 :
                mov   al, [si]
                cmp   al, gs:[di]
                je    NoCFix1
                ja    Decrease1
                inc   BYTE PTR [si]
                mov   bx, 1
                jmp   NoCFix1
Decrease1 :
                dec   BYTE PTR [si]
                mov   bx, 1
NoCFix1 :
                inc   si
                inc   di
                loop  MorphLoop1

                mov   dx,3C8h                   ;Port to send out startingcolor
                mov   al,1                     ;Starting color = 0
                out   dx, al                    ;Poek det ut!
                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette2 + 3
                mov   cx,765                    ;3*256 (RGB)=768 colors
                rep   outsb

                mov   ax, MyData
                mov   ds, ax

                cmp   bx, 1
                je    NoAction30
                mov   Flag30, 0
                mov   Flag31, 1
NoAction30 :

                cmp   Flag31, 0                 ;----------------- Flag 31
                je    NoAction31
                mov   ax, UnIntData
                mov   ds, ax
MoreMorph2 :
                mov   si, OFFSET Palette2
                mov   di, OFFSET IPal2
                mov   cx, 768
                xor   bx, bx
MorphLoop2 :
                mov   al, [si]
                cmp   al, gs:[di]
                je    NoCFix2
                ja    Decrease2
                inc   BYTE PTR [si]
                mov   bx, 1
                jmp   NoCFix2
Decrease2 :
                dec   BYTE PTR [si]
                mov   bx, 1
NoCFix2 :
                inc   si
                inc   di
                loop  MorphLoop2

                mov   dx,3C8h                   ;Port to send out startingcolor
                mov   al,1                     ;Starting color = 0
                out   dx, al                    ;Poek det ut!
                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette2 + 3
                mov   cx,765                    ;3*256 (RGB)=768 colors
                rep   outsb

                mov   ax, MyData
                mov   ds, ax

                cmp   bx, 1
                je    NoAction31
                mov   Flag31, 0
                mov   Flag32, 1
NoAction31 :

                cmp   Flag32, 0                 ;----------------- Flag 32
                je    NoAction32
                mov   ax, UnIntData
                mov   ds, ax
MoreMorph3 :
                mov   si, OFFSET Palette2
                mov   di, OFFSET IPal3
                mov   cx, 768
                xor   bx, bx
MorphLoop3 :
                mov   al, [si]
                cmp   al, gs:[di]
                je    NoCFix3
                ja    Decrease3
                inc   BYTE PTR [si]
                mov   bx, 1
                jmp   NoCFix3
Decrease3 :
                dec   BYTE PTR [si]
                mov   bx, 1
NoCFix3 :
                inc   si
                inc   di
                loop  MorphLoop3

                mov   dx,3C8h                   ;Port to send out startingcolor
                mov   al,1                     ;Starting color = 0
                out   dx, al                    ;Poek det ut!
                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette2 + 3
                mov   cx,765                    ;3*256 (RGB)=768 colors
                rep   outsb

                mov   ax, MyData
                mov   ds, ax

                cmp   bx, 1
                je    NoAction32
                mov   Flag32, 0
                mov   Flag30, 1
NoAction32 :

                cmp   Flag33, 0                 ;----------------- Flag 33
                je    NoAction33
                dec   Flag33_C
                jnz   NoAction33
                mov   Flag33, 0
                mov   Flag34, 1
                mov   RIntAdd, 1
NoAction33 :

                cmp   Flag34, 0                 ;----------------- Flag 34
                je    NoAction34
                dec   RXPos
                cmp   RXPos, -50
                jg    NoAction34
                mov   RIntAdd, 4
                mov   RExtAdd, 2
                mov   Flag34, 0
                mov   Flag35, 1
NoAction34 :

                cmp   Flag35, 0                 ;----------------- Flag 35
                je    NoAction35
                dec   Flag35_C
                jnz   NoAction35
                mov   Flag35, 0
                mov   Flag36, 1

NoAction35 :
                cmp   Flag36, 0
                je    NoAction36
                dec   RXPos
                cmp   RXPos, -200
                jg    NoAction36
                jmp   Part4_Done
NoAction36 :


;-------------------------- Here startes the image-part ---------------------

                xor   ax, ax
                mov   al, RIntAdd
                add   RIntAngle, ax
                cmp   RIntAngle, 360
                jl    P4IntReset
                sub   RIntAngle, 360
P4IntReset :

                mov   al, RExtAdd
                add   RExtAngle, ax
                cmp   RExtAngle, 360
                jl    P4ExtReset
                sub   RExtAngle, 360
P4ExtReset :

                mov   ax, RXPos                ;Rotate picture no. 1's
                mov   bx, RYPos                ;position
                mov   di, RExtAngle
                sal   ax, 4
                sal   bx, 4
                call  FRotate
                sar   ax, 3
                sar   bx, 4
                mov   RX, ax
                mov   RY, bx

                mov   si, OFFSET Image          ;Rotate picture no. 1
                mov   dx, -32
                mov   di, RIntAngle
VLoop :
                mov   bp, -32
HLoop :
                mov   ax, bp
                mov   bx, dx

                sal   ax, 8
                sal   bx, 8
                call  FRotate
                sar   ax, 7
                sar   bx, 7

                add   ax, 160
                add   bx, 100

                add   ax, RX
                add   bx, RY

                cmp   ax, 0                     ;
                jle   NoPixel                    ;
                cmp   ax, 319                   ;
                jge   NoPixel                    ;Test if the 2D-coords are
                cmp   bx, 0                     ;outside screen
                jle   NoPixel                    ;
                cmp   bx, 200                   ;
                jge   NoPixel                    ;

                push  di
                mov   cx, bx                    ;
                shl   cx, 6                     ;Multiply by 320
                add   ch, bl                    ;/
                add   cx, ax                    ;Add X
                mov   di, cx                    ;Set pointer
                mov   al, fs:[si]
                mov   ah, al
                mov   bx, ax
                shl   eax, 16
                mov   ax, bx
                cmp   BYTE PTR es:[di - 1], 0
                jne   NoFix1
                mov   es:[di - 1], al
NoFix1 :

                cmp   BYTE PTR es:[di  + 319], 0
                jne   NoFix2
                mov   es:[di + 319], al
NoFix2 :

                mov   es:[di], ax
                mov   es:[di + 320], ax
                pop   di

NoPixel :
                inc   si
                inc   bp
                cmp   bp, 32
                jl    HLoop
                inc   dx
                cmp   dx, 32
                jl    VLoop

                call  WaitForRaster

                mov   ax, 0A000h                ;Dump the canvas
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax

                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd

                mov   ax, Canvas
                mov   es, ax
                mov   ax, MyData
                mov   ds, ax                    ;Done dumping canvas

                mov   ah, 0Bh                   ;Check keyboard
                int   21h                       ;
                cmp   al, 00h                   ;Have somebody pressed a key?
                jne   AllDone                   ;OK, go home!
                jmp   Loop_Part4                ;No? Let's do another roll!
Part4_Done :                                    ;Done part four

;---------------------- Here startes "part 5"... :))))) (The text) ----------

                mov   ax, 0A000h
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Palette
                mov   dx,3C8h                   ;Port to send out startingcolor
                xor   al,al                      ;Starting color = 0
                out   dx, al                    ;Poek det ut!
                inc   dx                        ;Neste port sendes RGB verdiene
                mov   cx,768                    ;3*256 (RGB)=768 colors
                rep   outsb

                mov   si, OFFSET Str1           ;Introduction
                mov   ax, 160 - (12 * 18 /2)
                mov   dx, 20
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str2           ;By
                mov   ax, 160 - (2 * 18 /2)
                mov   dx, 140
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str3           ;The Lost Souls
                mov   ax, 160 - (14 * 18 /2)
                mov   dx, 160
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Logo           ;Show the logo
                mov   di, 17650
                mov   dx, 63
LogoLoop2 :
                mov   cx, 225
LHorLoop2 :
                lodsb
                cmp   al, 0
                je    LNoPix2
                mov   es:[di], al
LNoPix2 :
                inc   di
                loop  LHorLoop2
                add   di, 320 - 225
                dec   dx
                jnz   LogoLoop2

                mov   si, OFFSET Palette2       ;Fade the logo
                mov   cx, 192
                mov   eax, 3F3F3F3Fh
ZLoop :
                mov   fs:[si], eax
                add   si, 4
                loop  ZLoop

                mov   ax, UnIntData
                mov   ds, ax
MoreFading :
                mov   dx,3C8h                   ;Port to send out startingcolor
                mov   al,1                      ;Starting color = 0
                out   dx, al                    ;Poek det ut!
                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette2 + 3
                mov   cx,144                    ;3*256 (RGB)=768 colors
                rep   outsb

                mov   si, OFFSET Palette2
                mov   di, OFFSET Palette
                mov   cx, 144
                xor   bx, bx
FadeLoop3 :
                mov   al, [si]
                cmp   al, gs:[di]
                je    NoCFade3
                dec   BYTE PTR [si]
                mov   bx, 1
NoCFade3 :
                inc   si
                inc   di
                loop  FadeLoop3

                call  WaitForRaster
                call  WaitForRaster
                cmp   bx, 1
                je    MoreFading

                mov   ax, MyData
                mov   ds, ax

                mov   cx, 63

MoreFading2 :
                push  cx
                mov   dx,3C8h                   ;Port to send out startingcolor
                mov   al,205                      ;Starting color = 0
                out   dx, al                    ;Poek det ut!
                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette + 615
                mov   cx,9                    ;3*256 (RGB)=768 colors
                rep   outsb

                mov   si, OFFSET Palette + 615

                inc   BYTE PTR [si]
                inc   BYTE PTR [si + 1]
                inc   BYTE PTR [si + 2]

                call  WaitForRaster
                call  WaitForRaster

                pop   cx
                loop  MoreFading2

                mov   cx, 50                   ;300
DLoop :
                call  WaitForRaster
                loop  DLoop

                xor   bx, bx

MoreFading3 :                                   ;Fade out the logo
                mov   dx,3C8h                   ;Port to send out startingcolor
                xor   al, al                    ;Starting color = 0
                out   dx, al                    ;Poek det ut!
                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette
                mov   cx,144                    ;3*256 (RGB)=768 colors
                rep   outsb

                mov   si, OFFSET Palette
                mov   cx, 144
                xor   bx, bx
FadeLoop4 :
                mov   al, [si]
                cmp   al, 0
                je    NoCFade4
                dec   BYTE PTR [si]
                mov   bx, 1
NoCFade4 :
                inc   si
                inc   di
                loop  FadeLoop4

                call  WaitForRaster
                call  WaitForRaster

                cmp   bx, 1
                je    MoreFading3

                mov   di, 16000                 ;Blank the logo
                mov   eax, 0CCCCCCCCh
                mov   cx, 7000
                rep   stosd

;---------------------------- TEXT : Page 1 ---------------------------------

                mov   si, OFFSET Str4           ;Graphics:
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 30
                mov   bl, 2
                call  GrWrite

                mov   si, OFFSET Str5           ;Rex Rawhead
                mov   ax, 160 - (11 * 18 /2)
                mov   dx, 70
                mov   bl, 2
                call  GrWrite

                mov   si, OFFSET Str6           ;Euronymous
                mov   ax, 160 - (10 * 18 /2)
                mov   dx, 100
                mov   bl, 2
                call  GrWrite

                mov   si, OFFSET Str7           ;Cyberfish
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 130
                mov   bl, 2
                call  GrWrite

                call  CrossFade

                mov   cx, 300
DLoop2 :
                call  WaitForRaster
                loop  DLoop2



                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str4           ;Graphics:
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 30
                mov   bl, 4
                call  GrWrite

                mov   si, OFFSET Str5           ;Rex Rawhead
                mov   ax, 160 - (11 * 18 /2)
                mov   dx, 70
                mov   bl, 4
                call  GrWrite

                mov   si, OFFSET Str6           ;Euronymous
                mov   ax, 160 - (10 * 18 /2)
                mov   dx, 100
                mov   bl, 4
                call  GrWrite

                mov   si, OFFSET Str7           ;Cyberfish
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 130
                mov   bl, 4
                call  GrWrite

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   si, OFFSET Palette + 615
                mov   BYTE PTR [si], 63
                mov   BYTE PTR [si + 1], 63
                mov   BYTE PTR [si + 2], 63
                mov   BYTE PTR [si + 3], 0
                mov   BYTE PTR [si + 4], 0
                mov   BYTE PTR [si + 5], 0
                mov   BYTE PTR [si + 6], 63
                mov   BYTE PTR [si + 7], 63
                mov   BYTE PTR [si + 8], 63

                mov   dx, 3C8h                   ;Port to send out startingcolor
                mov   al, 205                     ;Starting color = 0

                out   dx, al                    ;Poek det ut!

                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette + 615

                mov   cx,9                    ;3*256 (RGB * Colors)=768 bytes
                rep   outsb

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str4           ;Graphics:
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 30
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str5           ;Rex Rawhead
                mov   ax, 160 - (11 * 18 /2)
                mov   dx, 70
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str6           ;Euronymous
                mov   ax, 160 - (10 * 18 /2)
                mov   dx, 100
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str7           ;Cyberfish
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 130
                mov   bl, 1
                call  GrWrite

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   ah, 0Bh                   ;Check keyboard
                int   21h                       ;
                cmp   al, 00h                   ;Have somebody pressed a key?
                jne   TextDone                   ;OK, go home!

;---------------------------- TEXT : Page 2 ---------------------------------

                mov   si, OFFSET Str8           ;Music:
                mov   ax, 160 - (6 * 18 /2)
                mov   dx, 70
                mov   bl, 2
                call  GrWrite

                mov   si, OFFSET Str9           ;Kezoomer
                mov   ax, 160 - (8 * 18 /2)
                mov   dx, 110
                mov   bl, 2
                call  GrWrite

                call  CrossFade

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   cx, 300
DLoop3 :
                call  WaitForRaster
                loop  DLoop3



                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str8           ;Music:
                mov   ax, 160 - (6 * 18 /2)
                mov   dx, 70
                mov   bl, 4
                call  GrWrite

                mov   si, OFFSET Str9           ;Kezoomer
                mov   ax, 160 - (8 * 18 /2)
                mov   dx, 110
                mov   bl, 4
                call  GrWrite

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   si, OFFSET Palette + 615
                mov   BYTE PTR [si], 63
                mov   BYTE PTR [si + 1], 63
                mov   BYTE PTR [si + 2], 63
                mov   BYTE PTR [si + 3], 0
                mov   BYTE PTR [si + 4], 0
                mov   BYTE PTR [si + 5], 0
                mov   BYTE PTR [si + 6], 63
                mov   BYTE PTR [si + 7], 63
                mov   BYTE PTR [si + 8], 63

                mov   dx, 3C8h                   ;Port to send out startingcolor
                mov   al, 205                     ;Starting color = 0

                out   dx, al                    ;Poek det ut!

                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette + 615

                mov   cx,9                    ;3*256 (RGB * Colors)=768 bytes
                rep   outsb

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str8           ;Music:
                mov   ax, 160 - (6 * 18 /2)
                mov   dx, 70
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str9           ;Kezoomer
                mov   ax, 160 - (8 * 18 /2)
                mov   dx, 110
                mov   bl, 1
                call  GrWrite

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   ah, 0Bh                   ;Check keyboard
                int   21h                       ;
                cmp   al, 00h                   ;Have somebody pressed a key?
                jne   TextDone                   ;OK, go home!

;---------------------------- TEXT : Page 3 ---------------------------------

                mov   si, OFFSET Str10           ;Coding:
                mov   ax, 160 - (7 * 18 /2)
                mov   dx, 70
                mov   bl, 2
                call  GrWrite

                mov   si, OFFSET Str7           ;Cyberfish
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 110
                mov   bl, 2
                call  GrWrite

                call  CrossFade

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   cx, 300
DLoop4 :
                call  WaitForRaster
                loop  DLoop4



                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str10           ;Coding:
                mov   ax, 160 - (7 * 18 /2)
                mov   dx, 70
                mov   bl, 4
                call  GrWrite

                mov   si, OFFSET Str7           ;Cyberfish
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 110
                mov   bl, 4
                call  GrWrite
                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   si, OFFSET Palette + 615
                mov   BYTE PTR [si], 63
                mov   BYTE PTR [si + 1], 63
                mov   BYTE PTR [si + 2], 63
                mov   BYTE PTR [si + 3], 0
                mov   BYTE PTR [si + 4], 0
                mov   BYTE PTR [si + 5], 0
                mov   BYTE PTR [si + 6], 63
                mov   BYTE PTR [si + 7], 63
                mov   BYTE PTR [si + 8], 63

                mov   dx, 3C8h                   ;Port to send out startingcolor
                mov   al, 205                     ;Starting color = 0

                out   dx, al                    ;Poek det ut!

                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette + 615

                mov   cx,9                    ;3*256 (RGB * Colors)=768 bytes
                rep   outsb

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str10           ;Coding:
                mov   ax, 160 - (7 * 18 /2)
                mov   dx, 70
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str7           ;Cyberfish
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 110
                mov   bl, 1
                call  GrWrite

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   ah, 0Bh                   ;Check keyboard
                int   21h                       ;
                cmp   al, 00h                   ;Have somebody pressed a key?
                jne   TextDone                   ;OK, go home!

;---------------------------- TEXT : Page 4 ---------------------------------

                mov   si, OFFSET Str11           ;Objects:
                mov   ax, 160 - (8 * 18 /2)
                mov   dx, 50
                mov   bl, 2
                call  GrWrite

                mov   si, OFFSET Str7           ;Cyberfish
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 90
                mov   bl, 2
                call  GrWrite

                mov   si, OFFSET Str9           ;Kezoomer
                mov   ax, 160 - (8 * 18 /2)
                mov   dx, 120
                mov   bl, 2
                call  GrWrite

                call  CrossFade

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   cx, 300
DLoop5 :
                call  WaitForRaster
                loop  DLoop5



                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str11           ;Objects:
                mov   ax, 160 - (8 * 18 /2)
                mov   dx, 50
                mov   bl, 4
                call  GrWrite

                mov   si, OFFSET Str7           ;Cyberfish
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 90
                mov   bl, 4
                call  GrWrite

                mov   si, OFFSET Str9           ;Kezoomer
                mov   ax, 160 - (8 * 18 /2)
                mov   dx, 120
                mov   bl, 4
                call  GrWrite

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   si, OFFSET Palette + 615
                mov   BYTE PTR [si], 63
                mov   BYTE PTR [si + 1], 63
                mov   BYTE PTR [si + 2], 63
                mov   BYTE PTR [si + 3], 0
                mov   BYTE PTR [si + 4], 0
                mov   BYTE PTR [si + 5], 0
                mov   BYTE PTR [si + 6], 63
                mov   BYTE PTR [si + 7], 63
                mov   BYTE PTR [si + 8], 63

                mov   dx, 3C8h                   ;Port to send out startingcolor
                mov   al, 205                     ;Starting color = 0

                out   dx, al                    ;Poek det ut!

                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette + 615

                mov   cx,9                    ;3*256 (RGB * Colors)=768 bytes
                rep   outsb

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str11           ;Objects:
                mov   ax, 160 - (8 * 18 /2)
                mov   dx, 50
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str7           ;Cyberfish
                mov   ax, 160 - (9 * 18 /2)
                mov   dx, 90
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str9           ;Kezoomer
                mov   ax, 160 - (8 * 18 /2)
                mov   dx, 120
                mov   bl, 1
                call  GrWrite

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   ah, 0Bh                   ;Check keyboard
                int   21h                       ;
                cmp   al, 00h                   ;Have somebody pressed a key?
                jne   TextDone                   ;OK, go home!

;---------------------------- TEXT : Page 5 ---------------------------------

                mov   si, OFFSET Str12           ;General ideas,
                mov   ax, 160 - (14 * 18 /2)
                mov   dx, 30
                mov   bl, 2
                call  GrWrite

                mov   si, OFFSET Str13           ;Inspiration
                mov   ax, 160 - (11 * 18 /2)
                mov   dx, 60
                mov   bl, 2
                call  GrWrite

                mov   si, OFFSET Str14           ;and Jokes:
                mov   ax, 160 - (10 * 18 /2)
                mov   dx, 90
                mov   bl, 2
                call  GrWrite

                mov   si, OFFSET Str3           ;The Lost Souls
                mov   ax, 160 - (14 * 18 /2)
                mov   dx, 130
                mov   bl, 2
                call  GrWrite

                call  CrossFade

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   cx, 300
DLoop6 :
                call  WaitForRaster
                loop  DLoop6



                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str12           ;General ideas,
                mov   ax, 160 - (14 * 18 /2)
                mov   dx, 30
                mov   bl, 4
                call  GrWrite

                mov   si, OFFSET Str13           ;Inspiration
                mov   ax, 160 - (11 * 18 /2)
                mov   dx, 60
                mov   bl, 4
                call  GrWrite

                mov   si, OFFSET Str14           ;and Jokes
                mov   ax, 160 - (10 * 18 /2)
                mov   dx, 90
                mov   bl, 4
                call  GrWrite

                mov   si, OFFSET Str3           ;The Lost Souls
                mov   ax, 160 - (14 * 18 /2)
                mov   dx, 130
                mov   bl, 4
                call  GrWrite

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   si, OFFSET Palette + 615
                mov   BYTE PTR [si], 63
                mov   BYTE PTR [si + 1], 63
                mov   BYTE PTR [si + 2], 63
                mov   BYTE PTR [si + 3], 0
                mov   BYTE PTR [si + 4], 0
                mov   BYTE PTR [si + 5], 0
                mov   BYTE PTR [si + 6], 63
                mov   BYTE PTR [si + 7], 63
                mov   BYTE PTR [si + 8], 63

                mov   dx, 3C8h                   ;Port to send out startingcolor
                mov   al, 205                     ;Starting color = 0

                out   dx, al                    ;Poek det ut!

                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette + 615

                mov   cx,9                    ;3*256 (RGB * Colors)=768 bytes
                rep   outsb

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str12           ;General ideas,
                mov   ax, 160 - (14 * 18 /2)
                mov   dx, 30
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str13           ;Inspiration
                mov   ax, 160 - (11 * 18 /2)
                mov   dx, 60
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str14           ;and jokes:
                mov   ax, 160 - (10 * 18 /2)
                mov   dx, 90
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str3           ;The Lost Souls
                mov   ax, 160 - (14 * 18 /2)
                mov   dx, 130
                mov   bl, 1
                call  GrWrite

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   ah, 0Bh                   ;Check keyboard
                int   21h                       ;
                cmp   al, 00h                   ;Have somebody pressed a key?
                jne   TextDone                   ;OK, go home!

;---------------------------- TEXT : Page 6 ---------------------------------

                mov   si, OFFSET Str15          ;A production of
                mov   ax, 160 - (15 * 18 /2)
                mov   dx, 70
                mov   bl, 2
                call  GrWrite

                mov   si, OFFSET Str16          ;The Lost Souls 1995
                mov   ax, 160 - (15 * 18 /2)
                mov   dx, 114
                mov   bl, 2
                call  GrWrite

                call  CrossFade

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   cx, 300
DLoop7 :
                call  WaitForRaster
                loop  DLoop7

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str15           ;A production of
                mov   ax, 160 - (15 * 18 /2)
                mov   dx, 70
                mov   bl, 4
                call  GrWrite

                mov   si, OFFSET Str16           ;The Lost Souls 1995
                mov   ax, 160 - (15 * 18 /2)
                mov   dx, 114
                mov   bl, 4
                call  GrWrite

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   si, OFFSET Palette + 615
                mov   BYTE PTR [si], 63
                mov   BYTE PTR [si + 1], 63
                mov   BYTE PTR [si + 2], 63
                mov   BYTE PTR [si + 3], 0
                mov   BYTE PTR [si + 4], 0
                mov   BYTE PTR [si + 5], 0
                mov   BYTE PTR [si + 6], 63
                mov   BYTE PTR [si + 7], 63
                mov   BYTE PTR [si + 8], 63

                mov   dx, 3C8h                   ;Port to send out startingcolor
                mov   al, 205                     ;Starting color = 0

                out   dx, al                    ;Poek det ut!

                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette + 615

                mov   cx,9                    ;3*256 (RGB * Colors)=768 bytes
                rep   outsb

                mov   ax, Canvas
                mov   es, ax
                xor   di, di
                mov   eax, 0CCCCCCCCh
                mov   cx, 16000
                rep   stosd

                mov   si, OFFSET Str15           ;A production of
                mov   ax, 160 - (15 * 18 /2)
                mov   dx, 70
                mov   bl, 1
                call  GrWrite

                mov   si, OFFSET Str16           ;The Lost Souls 1995
                mov   ax, 160 - (15 * 18 /2)
                mov   dx, 114
                mov   bl, 1
                call  GrWrite

                mov   ax, 0A000h
                mov   es, ax
                mov   ax, Canvas
                mov   ds, ax
                xor   di, di
                xor   si, si
                mov   cx, 16000
                rep   movsd
                mov   ax, MyData
                mov   ds, ax

                mov   ah, 0Bh                   ;Check keyboard
                int   21h                       ;
                cmp   al, 00h                   ;Have somebody pressed a key?
                jne   TextDone                   ;OK, go home!

TextDone :
                call  CrossFade

AllDone :

                mov  al, 03h                   ;80x25x16
                mov  ah, 00h                   ;set screenmode
                int  10h


    call    StopMusic
    call    StopOutput
    call    UnloadModule
    call    FreeMSE

MusicFuck :                                       ;Let's go home... :(

                mov   ax, 4C00h
                int   21h
Main          ENDP

CrossFade     PROC
                mov   bl, 63
CrossFadeL :
                mov   si, OFFSET Palette + 615
                dec   BYTE PTR [si]
                dec   BYTE PTR [si + 1]
                dec   BYTE PTR [si + 2]

                inc   BYTE PTR [si + 3]
                inc   BYTE PTR [si + 4]
                inc   BYTE PTR [si + 5]

                cmp   bl, 31
                jbe   Increase
Decrease :
                dec   BYTE PTR [si + 6]
                dec   BYTE PTR [si + 7]
                dec   BYTE PTR [si + 8]
                jmp   DoneQK
Increase :
                inc   BYTE PTR [si + 6]
                inc   BYTE PTR [si + 7]
                inc   BYTE PTR [si + 8]
DoneQK :

                mov   dx, 3C8h                   ;Port to send out startingcolor
                mov   al, 205                     ;Starting color = 0

                out   dx, al                    ;Poek det ut!

                inc   dx                        ;Neste port sendes RGB verdiene
                mov   si, OFFSET Palette + 615

                mov   cx,9                    ;3*256 (RGB * Colors)=768 bytes
                rep   outsb
                call  WaitForRaster
                call  WaitForRaster

                dec   bl
                jnz   CrossFadeL  
                ret
CrossFade     ENDP

;---------------------------------------------------------------------------
;Writes string pointed to by si, using the graphics font
;Entry  :  [si] = String
;          ax = X
;          bl = Color
;          dx = Y
;---------------------------------------------------------------------------

GrWrite       PROC
                mov   cx, dx                    ;Multiply
                shl   cx, 6                     ;/by
                add   ch, dl                    ;/320
                add   cx, ax                    ;Add X
                mov   di, cx

CharLoop :
                xor   ax, ax
                lodsb
                cmp   al, 'á'
                je    GrWrDone
                push  si
                dec   al
                mov   si, OFFSET Font           ;Font's offset
                shl   ax, 8                     ;Each character = 256 bytes
                add   si, ax                    ;Point to right character
                push  di
                mov   ax, 16                    ;Font's height is 4 pixels
CharYLoop :
                mov   cx, 16                    ;Font's width = 16 pixels
CharXLoop :
                mov   bh, ds:[si]
                cmp   bh, 0
                je    NoFPixel
                add   es:[di], bl
NoFPixel :
                inc   si
                inc   di
                loop  CharXLoop

                add   di, 304
                dec   ax
                jnz   CharYLoop

                pop   di
                add   di, 18                    ;Font's width + 1
                pop   si
                jmp   CharLoop

GrWrDone :
                ret
GrWrite       ENDP

;----------------------------------------------------------------------------
;Name         : StarField2
;Type         : Procedure
;Last update  : 12.02.95
;Action       : Draws/updates a starfield which rotates around you
;Optimized    : Yes.
;
;Input variables : -
;
;Output variables : -
;
;Registers changed : None
;
;Notes : The procedure contains a large table holding the random XYZ-coords
;for 250 stars. I guess it's possible to avoid this in some way. It takes the
;angle in the variables XAngle, YAngle and ZAngle and rotates the stars
;corresponding to these angles.
;----------------------------------------------------------------------------

StarField2    PROC
                pusha                           ;Save registers

                mov   si, OFFSET StarTabl       ;Point si to the startable

StarLoop :
                mov   ax, WORD PTR [si]         ;Load new X
                mov   bx, WORD PTR [si + 2]     ;Load new Y

                xor   dx, dx
                mov   dl, StSpeed

                mov   cx, WORD PTR [si + 4]     ;Load new Z
                sub   cx, dx                     ;Move star

                sub   WORD PTR [si + 4], dx      ;Decrease the value in the table
                cmp   cx, -511                  ;Check if the star has left us
                jg    Valid                     ;If not, don't bother
                mov   cx, 511                   ;If so, move it to front again
                mov   WORD PTR [si + 4], 512    ;/
Valid :
                push  si                        ;Save pointers
                push  di                        ;/
                mov   dx, AngleX                ;Load degrees to rotate
                mov   si, AngleY
                mov   di, AngleZ
                call  Rotate                    ;Rotate it all over!
                pop   di                        ;Restore pointers
                pop   si                        ;/

                cmp   cx, -150                     ;Check if star is in front of the user
                jg    StarOK                    ;If so, then draw
                add   si, 6                     ;Point si to the next star in the table
                cmp   si, OFFSET StarTabl + 2400d ;NumStars * 2 (Word = 2 bytes) * 3 (X, Y, Z) = 600 (100 stars)
                jb    StarLoop                  ;If not, do it again
                popa                            ;Restore registers
                ret                             ;Go home!

StarOK :
                add   cx, 255
                mov   Col, cx                   ;Save Z-value
                add   ax, StXPos                ;Move center forward
                add   cx, 500
                call  F3DTo2D                   ;Calculate the 2D-coords
                add   ax, 160                ;Move stars to the center
                add   bx, 100                   ;of the screen

                cmp   ax, 0                     ;
                jle   NoStar                    ;
                cmp   ax, 320                   ;
                jge   NoStar                    ;Test if the 2D-coords are
                cmp   bx, 0                     ;outside screen
                jle   NoStar                    ;
                cmp   bx, 200                   ;
                jge   NoStar                    ;

                mov   dx, bx
                mov   cx, Col                   ;Put Z-value in bx and use it as colour
                shr   cx, 6                     ;Divide it
                add   cx, 96

                mov   bx, dx                    ;These four lines
                shl   bx, 6                     ;calculates the
                add   bh, dl                    ;position in the
                add   bx, ax                    ;VGA-buffer

                mov   BYTE PTR es:[bx], cl      ;Put it in the VGA-buffer

NoStar :

                add   si, 6                     ;Point si to the next star in the table
                cmp   si, OFFSET StarTabl + 1500d ;NumStars * 2 (Word = 2 bytes) * 3 (X, Y, Z) = 600 (100 stars)
                jb    StarLoop                  ;If not, do it again

                popa

                ret                             ;Updated all stars, go home!
StarField2    ENDP

WaitForRaster  PROC    NEAR

               PUSH    AX
               PUSH    DX
               MOV     DX,3dah
.loop1:        IN      AL,DX
               and    AL,08h
               JNz     .loop1
.loop2:        IN      Al,DX
               TEST    AL,8
               JE      .loop2
               POP     DX
               POP     AX
               RET

WaitForRaster  ENDP

;----------------------------------------------------------------------------
;Name         : Gl_Poly
;Author       : Cyberfish of The Lost Souls
;Type         : Procedure
;Last update  : Sometime the spring 1995
;Action       : Draws a filled n-polygon and clips it to the screen
;Optimized    : Well, I don't know. In my way, it is.
;
;Input variables : [si] = number of vertices (n)
;                  [si + 1] -> [si * n]
;                  bp = color
;
;Registers changed : None.
;
;Notes : Well... Nothing much to say. It works!
;The line-calculating algoritm is the same as in my line-procedure.
;In short, it works like this :
;BEFORE LOOP :
;1. Find DeltaX, DeltaY
;2. Save DeltaX and DeltaY, and put a copy of DeltaX in a counter
;INSIDE LOOP
;3. Test if the counter is below DeltaY. If so, increase by DeltaX, draw a
;   vertical pixel and do loop over again.
;4. If the counter is above DeltaY, then sub the counter by DeltaY and draw
;   a horisontal pixel.
;5. Test if the lineX, Y-counters has passed the line ending-vertice.
;----------------------------------------------------------------------------

Gl_Poly       PROC
                pusha                           ;Save registers
                pushf                           ;Save flags state
                cld
                clc

                mov   ax, bp                    ;Make both high and low byte
                mov   ah, al                    ;contain the same color
                mov   P_Col, ax                 ;Save color

                xor   dx, dx

                mov   dl, fs:[si]               ;Load number of vertices
                mov   P_Vertices, dl            ;Save vertices
                inc   si                        ;Point si to the coordinates

                dec   dl                        ;svada
                mov   cl, dl                    ;Put counter in cl

                mov   P_StartOffs, si           ;Save offset to coordinates
                mov   bp, si                    ;Take a copy of startoffs

                shl   dl, 2                     ;Vertices * 2 (word) * 2 (X,Y)
                add   dx, si                    ;Add input-offset
                mov   P_EndOffs, dx             ;Save end-offs to coordinates

                mov   bx, si
                add   si, 4
                mov   bp, WORD PTR fs:[bx + 2]
                mov   P_YCounter, bp
                mov   P_LowestY, bp

Gl_Upper :
                mov   ax, fs:[si + 2]
                add   si, 4
                cmp   ax, P_YCounter
                jg    Gl_Under
                mov   bx, si
                sub   bx, 4
                mov   P_YCounter, ax
Gl_Under :
                cmp   ax, P_LowestY
                jl    Gl_Over
                mov   P_LowestY, ax
Gl_Over :
                loop  Gl_Upper

                mov   P_UpperOffs, bx           ;Save offs of upper coordinate
                mov   si, bx                    ;Load upper coord-offs
                mov   di, bx                    ;Save upper coord-offs

                mov   ax, fs:[si]                  ;Load X1
                mov   bx, fs:[si + 2]              ;Load Y1

                cmp   si, P_EndOffs             ;Test if si is at end of
                jb    Gl_NotEnd                  ;coordinate list

                mov   si, P_StartOffs           ;If so, point to start
                sub   si, 4                     ;Neutralize the adding
                stc                             ;Indicate no further testing is needed
Gl_NotEnd :
                add   si, 4                     ;Point to next coordinates
                mov   P_COffs1, si
                mov   cx, fs:[si]                  ;Load X2
                mov   dx, fs:[si + 2]              ;Load Y2
                mov   P_NextX1, cx              ;Save next X-value clockwise

                mov   si, di                    ;Load upper coord-offs
                jc    Gl_NotStart                ;No testing necessary
                cmp   si, P_StartOffs           ;Test if si is at the start
                jg    Gl_NotStart                ;of the coordinate list

                mov   si, P_EndOffs             ;If so, point to end
                add   si, 4                     ;Neutralize subtraction
Gl_NotStart :
                sub   si, 4                     ;Point to next coordinates
                mov   P_COffs2, si
                mov   di, fs:[si]                  ;Load X3
                mov   si, fs:[si + 2]              ;Load Y3
                mov   P_NextX2, di              ;Save next X-value c-clockwise

;--------- About to calculate DeltaX and direction of X1, Y1 - X2, Y2 ---------

                mov   P_X1Inc, 1                ;Count X1 right
                mov   bp, 1
                cmp   ax, cx
                jle   Gl_Right1                  ;X1 < X2 = count right
                mov   P_X1Inc, -1               ;Count X1 left
                mov   bp, -1
Gl_Right1 :
                add   P_NextX1, bp
                sub   cx, ax                    ;DeltaX1
                cmp   cx, 0                     ;Make-
                jge   Gl_DeltX1Pos               ;DeltaX1-
                neg   cx                        ;positive!
Gl_DeltX1Pos :

                sub   dx, bx                    ;DeltaY1
                inc   cx                        ;Fix
                inc   dx                        ;Fix
                mov   P_DeltaX1, cx             ;Save DeltaX1
                mov   P_DeltaY1, dx             ;Save DeltaY1

;--------- Done calculating direction and delta of X1, Y1 - X2, Y2 ---------


                mov   P_X2Inc, 1                ;Count X2 right
                mov   bp, 1
                cmp   ax, di                    ;X1, X3
                jle   Gl_Right2                  ;X1 < X3 = count right
                mov   P_X2Inc, -1               ;Count X2 left
                mov   bp, -1
Gl_Right2 :
                add   P_NextX2, bp
                sub   di, ax                    ;DeltaX2
                cmp   di, 0                     ;Make-
                jg    Gl_DeltX2Pos               ;DeltaX2-
                neg   di                        ;Positive!
Gl_DeltX2Pos :

                sub   si, bx                    ;DeltaY
                inc   di                        ;Fix
                inc   si                        ;Fix
                mov   P_DeltaX2, di             ;Save DeltaX2
                mov   P_DeltaY2, si             ;Save DeltaY2

;--------- Done calculating direction and delta of X1, Y1 - X3, Y3 ---------

                mov   dx, bx
                shl   dx, 6                     ;Multiply by 320 to calc di's
                add   dh, bl                    ;pos in VGA-segment
                add   dx, ax                    ;Add X
                mov   di, dx                    ;Point di to the start-offs
                mov   si, dx                    ;Point si to the start-offs

                mov   dx, P_DeltaX1             ;Put DeltaX1 in dx to save time
                mov   bp, P_DeltaX2             ;Put DeltaX2 in bp to save time
                mov   bx, ax                    ;values


Gl_Loop :                                        ;Here starts the loop
                cmp   dx, P_DeltaY1
                jb    Gl_TestFin

                sub   dx, P_DeltaY1
                add   ax, P_X1Inc               ;Increase/decrease X-counter

                add   di, P_X1Inc
                cmp   ax, P_NextX1

                jne   Gl_Loop

;-------------------- Here goes the new verticecalculating ------------------

                sub   di, P_X1Inc

                push  di
                push  si

                mov   di, P_COffs1
                mov   si, P_COffs1

                cmp   si, P_EndOffs             ;Test if si is at the start
                jl    Gl_LNotEnd                 ;of the coordinate list

                mov   si, P_StartOffs           ;If so, point to end
                sub   si, 4                     ;Neutralize following sub
Gl_LNotEnd :
                add   si, 4                     ;Point to next coordinates
                mov   dx, fs:[si]                  ;Can't move directly <|-(
                mov   P_NextX1, dx              ;Save next X-value c-clockwise
                mov   P_COffs1, si

                mov   ax, fs:[si]
                mov   P_X1Inc, 1                ;Count X2 right
                mov   dx, 1
                cmp   fs:[di], ax               ;X - NextX
                jle   Gl_LRight1
                mov   P_X1Inc, -1               ;Count X2 left
                mov   dx, -1
Gl_LRight1 :
                add   P_NextX1, dx
                sub   ax, fs:[di]               ;DeltaX2
                cmp   ax, 0
                jge   Gl__DeltX1Pos
                neg   ax
Gl__DeltX1Pos :
                inc   ax
                mov   P_DeltaX1, ax
                mov   dx, ax

                mov   ax, fs:[si + 2]
                sub   ax, fs:[di + 2]
                inc   ax
                mov   P_DeltaY1, ax

                mov   ax, fs:[di]

                pop   si
                pop   di

Gl_TestFin :
                push  ax

                mov   ax, P_YCounter
                cmp   ax, P_LowestY
                jl    Gl_NotFinish

                pop   ax
                popf                            ;Restore flags
                popa                            ;Restore registers
                ret                             ;Go home!
Gl_NotFinish :
                pop   ax

Gl_TestC2 :
                cmp   bp, P_DeltaY2
                jb    Gl_IncY

                sub   bp, P_DeltaY2
                add   bx, P_X2Inc               ;Increase/decrease X-counter
                add   si, P_X2Inc

                cmp   bx, P_NextX2              ;Finish?
                jne   Gl_TestC2                  ;Way to go!

;-------------------- Here goes the new verticecalculating ------------------

                sub   si, P_X2Inc

                push  di
                push  si

                mov   di, P_COffs2
                mov   si, P_COffs2

                cmp   si, P_StartOffs           ;Test if si is at the start
                jg    Gl_LNotStart               ;of the coordinate list

                mov   si, P_EndOffs             ;If so, point to end
                add   si, 4                     ;Neutralize following sub
Gl_LNotStart :
                sub   si, 4                     ;Point to next coordinates
                mov   bp, fs:[si]                  ;Can't move directly <|-(
                mov   P_NextX2, bp              ;Save next X-value c-clockwise
                mov   P_COffs2, si

                mov   bx, fs:[si]
                mov   P_X2Inc, 1                ;Count X2 right
                mov   bp, 1
                cmp   fs:[di], bx               ;X - NextX
                jle   Gl_LRight2
                mov   P_X2Inc, -1               ;Count X2 left
                mov   bp, -1
Gl_LRight2 :
                add   P_NextX2, bp
                sub   bx, fs:[di]               ;DeltaX2
                cmp   bx, 0
                jge   Gl__DeltX2Pos
                neg   bx
Gl__DeltX2Pos :
                inc   bx
                mov   P_DeltaX2, bx
                mov   bp, bx

                mov   bx, fs:[si + 2]
                sub   bx, fs:[di + 2]
                inc   bx
                mov   P_DeltaY2, bx

                mov   bx, fs:[di]

                pop   si
                pop   di

Gl_IncY :
                add   dx, P_DeltaX1
                add   bp, P_DeltaX2

                push  ax                        ;Save some all-purpose-regs
                push  bx
                push  cx
                push  dx
                push  di                        ;...and the pointers
                push  si

                cmp   P_YCounter, 0            ;Clip at top
                jl    Gl_DoneFill               ;Above? Then done.
                cmp   P_YCounter, 200          ;Clip at bottom
                jge   Gl_DoneFill               ;Below? Then done.

;------ Test X1-counter against left side of the screen (X-value = 0) --------

                cmp   ax, 0                     ;Clip against left side
                jg    Gl_TestX1Right
                mov   cx, P_YCounter
                shl   cx, 6                     ;Multiply by 320 to calc di's
                add   ch, BYTE PTR P_YCounter  ;pos in VGA-segment
                mov   di, cx                    ;Put new mem-position in di

                cmp   bx, 0                     ;Test if both pointers is
                jg    Gl_TestX2Right            ;outside at left side

                mov   al, 1
                mov   si, di
                jmp   Gl_DoneClip

;------ Test X1-counter against right side of the screen (X-value = 0) -------

Gl_TestX1Right :
                cmp   ax, 319                   ;Clip against right side
                jl    Gl_TestX2Left
                mov   cx, P_YCounter
                shl   cx, 6                     ;Multiply by 320 to calc di's
                add   ch, BYTE PTR P_YCounter  ;pos in the VGA-segment
                add   cx, 319                   ;Move to screen's right side
                mov   di, cx                    ;Put new mem-position in di

                cmp   bx, 319                   ;Test if both pointers is
                jl    Gl_TestX2Left             ;outside at right side

                mov   al, 1
                mov   si, di
                jmp   Gl_DoneClip

;------- Test X2-counter against left side of the screen (X-value = 0) -------

Gl_TestX2Left :
                cmp   bx, 0                     ;Clip against left side
                jg    Gl_TestX2Right
                mov   cx, P_YCounter
                shl   cx, 6                     ;Multiply by 320 to calc si's
                add   ch, BYTE PTR P_YCounter  ;pos in the VGA-segment
                mov   si, cx

;------ Test X2-counter against right side of the screen (X-value = 0) -------

Gl_TestX2Right :
                cmp   bx, 319                   ;Clip against right side
                jl    Gl_DoneClip
                mov   cx, P_YCounter
                shl   cx, 6                     ;Multiply by 320 to calc si's
                add   ch, BYTE PTR P_YCounter  ;pos in the VGA-segment
                add   cx, 319                   ;Move to screen's right side
                mov   si, cx

Gl_DoneClip :

;----------- Done all clipping, both against sides and top/bottom -----------

                mov   dx, -1
                mov   bl, -1
                mov   bh, -1
                mov   cx, di
                sub   cx, si

                mov   ah, -1

                cmp   cx, 0
                jge   Gl_CountPos
                neg   cx
                mov   dx, 1
                mov   bl, 1
                mov   bh, 1
                mov   ah, 1
Gl_CountPos :
                cmp   al, 1
                je    Gl_Clipping
                inc   cx
Gl_Clipping :

                mov   ax, P_Col
                shl   eax, 16
                mov   ax, P_Col

                test  cx, 0000000000000001b
                jz    Gl_WordFill
                add   es:[di], al
                add   di, dx
                dec   cx
Gl_WordFill :
                test  cx, 0000000000000010b
                jz    Gl_DWordFill

                cmp   bl, -1
                jne   Gl_NoFix1
                dec   di
Gl_NoFix1 :
                add  es:[di], ax
                add  di, dx
                add  di, dx
                sub  cx, 2
                mov  bh, 1
Gl_DWordFill :
                cmp   cx, 0
                jle   Gl_DoneFill

                cmp   bl, -1
                jne   Gl_NoFix3
                sub   di, 2
Gl_NoFix2 :

                cmp   bh, -1
                jne   Gl_NoFix3
                dec   di
Gl_NoFix3 :
;                shl   eax, 16
;                mov   al, BYTE PTR P_Col
;                mov   ah, al

                shr   cx, 2
                sal   dx, 2
Gl_HorFill :
                add   es:[di], eax
                add   di, dx
                loop  Gl_HorFill
Gl_DoneFill :

                pop   si
                pop   di
                pop   dx
                pop   cx
                pop   bx
                pop   ax

                add   di, 320
                add   si, 320
                inc   P_YCounter

                jmp   Gl_Loop

Gl_Poly       ENDP

;----------------------------------------------------------------------------
;Name         : Cl_Poly
;Author       : Cyberfish of The Lost Souls
;Type         : Procedure
;Last update  : Sometime the spring 1995
;Action       : Draws a filled n-polygon and clips it to the screen
;Optimized    : Well, I don't know. In my way, it is.
;
;Input variables : [si] = number of vertices (n)
;                  [si + 1] -> [si * n]
;                  bp = color
;
;Registers changed : None.
;
;Notes : Well... Nothing much to say. It works!
;The line-calculating algoritm is the same as in my line-procedure.
;In short, it works like this :
;BEFORE LOOP :
;1. Find DeltaX, DeltaY
;2. Save DeltaX and DeltaY, and put a copy of DeltaX in a counter
;INSIDE LOOP
;3. Test if the counter is below DeltaY. If so, increase by DeltaX, draw a
;   vertical pixel and do loop over again.
;4. If the counter is above DeltaY, then sub the counter by DeltaY and draw
;   a horisontal pixel.
;5. Test if the lineX, Y-counters has passed the line ending-vertice.
;----------------------------------------------------------------------------

Cl_Poly       PROC
                pusha                           ;Save registers
                pushf                           ;Save flags state
                cld
                clc

                mov   ax, bp                    ;Make both high and low byte
                mov   ah, al                    ;contain the same color
                mov   P_Col, ax                 ;Save color

                xor   dx, dx

                mov   dl, fs:[si]               ;Load number of vertices
                mov   P_Vertices, dl            ;Save vertices
                inc   si                        ;Point si to the coordinates

                dec   dl                        ;svada
                mov   cl, dl                    ;Put counter in cl

                mov   P_StartOffs, si           ;Save offset to coordinates
                mov   bp, si                    ;Take a copy of startoffs

                shl   dl, 2                     ;Vertices * 2 (word) * 2 (X,Y)
                add   dx, si                    ;Add input-offset
                mov   P_EndOffs, dx             ;Save end-offs to coordinates

                mov   bx, si
                add   si, 4
                mov   bp, WORD PTR fs:[bx + 2]
                mov   P_YCounter, bp
                mov   P_LowestY, bp

P_Upper :
                mov   ax, fs:[si + 2]
                add   si, 4
                cmp   ax, P_YCounter
                jg    P_Under
                mov   bx, si
                sub   bx, 4
                mov   P_YCounter, ax
P_Under :
                cmp   ax, P_LowestY
                jl    P_Over
                mov   P_LowestY, ax
P_Over :
                loop  P_Upper

                mov   P_UpperOffs, bx           ;Save offs of upper coordinate
                mov   si, bx                    ;Load upper coord-offs
                mov   di, bx                    ;Save upper coord-offs

                mov   ax, fs:[si]                  ;Load X1
                mov   bx, fs:[si + 2]              ;Load Y1

                cmp   si, P_EndOffs             ;Test if si is at end of
                jb    P_NotEnd                  ;coordinate list

                mov   si, P_StartOffs           ;If so, point to start
                sub   si, 4                     ;Neutralize the adding
                stc                             ;Indicate no further testing is needed
P_NotEnd :
                add   si, 4                     ;Point to next coordinates
                mov   P_COffs1, si
                mov   cx, fs:[si]                  ;Load X2
                mov   dx, fs:[si + 2]              ;Load Y2
                mov   P_NextX1, cx              ;Save next X-value clockwise

                mov   si, di                    ;Load upper coord-offs
                jc    P_NotStart                ;No testing necessary
                cmp   si, P_StartOffs           ;Test if si is at the start
                jg    P_NotStart                ;of the coordinate list

                mov   si, P_EndOffs             ;If so, point to end
                add   si, 4                     ;Neutralize subtraction
P_NotStart :
                sub   si, 4                     ;Point to next coordinates
                mov   P_COffs2, si
                mov   di, fs:[si]                  ;Load X3
                mov   si, fs:[si + 2]              ;Load Y3
                mov   P_NextX2, di              ;Save next X-value c-clockwise

;--------- About to calculate DeltaX and direction of X1, Y1 - X2, Y2 ---------

                mov   P_X1Inc, 1                ;Count X1 right
                mov   bp, 1
                cmp   ax, cx
                jle   P_Right1                  ;X1 < X2 = count right
                mov   P_X1Inc, -1               ;Count X1 left
                mov   bp, -1
P_Right1 :
                add   P_NextX1, bp
                sub   cx, ax                    ;DeltaX1
                cmp   cx, 0                     ;Make-
                jge   P_DeltX1Pos               ;DeltaX1-
                neg   cx                        ;positive!
P_DeltX1Pos :

                sub   dx, bx                    ;DeltaY1
                inc   cx                        ;Fix
                inc   dx                        ;Fix
                mov   P_DeltaX1, cx             ;Save DeltaX1
                mov   P_DeltaY1, dx             ;Save DeltaY1

;--------- Done calculating direction and delta of X1, Y1 - X2, Y2 ---------


                mov   P_X2Inc, 1                ;Count X2 right
                mov   bp, 1
                cmp   ax, di                    ;X1, X3
                jle   P_Right2                  ;X1 < X3 = count right
                mov   P_X2Inc, -1               ;Count X2 left
                mov   bp, -1
P_Right2 :
                add   P_NextX2, bp
                sub   di, ax                    ;DeltaX2
                cmp   di, 0                     ;Make-
                jg    P_DeltX2Pos               ;DeltaX2-
                neg   di                        ;Positive!
P_DeltX2Pos :

                sub   si, bx                    ;DeltaY
                inc   di                        ;Fix
                inc   si                        ;Fix
                mov   P_DeltaX2, di             ;Save DeltaX2
                mov   P_DeltaY2, si             ;Save DeltaY2

;--------- Done calculating direction and delta of X1, Y1 - X3, Y3 ---------

                mov   dx, bx
                shl   dx, 6                     ;Multiply by 320 to calc di's
                add   dh, bl                    ;pos in VGA-segment
                add   dx, ax                    ;Add X
                mov   di, dx                    ;Point di to the start-offs
                mov   si, dx                    ;Point si to the start-offs

                mov   dx, P_DeltaX1             ;Put DeltaX1 in dx to save time
                mov   bp, P_DeltaX2             ;Put DeltaX2 in bp to save time
                mov   bx, ax                    ;values


P_Loop :                                        ;Here starts the loop
                cmp   dx, P_DeltaY1
                jb    P_TestFin

                sub   dx, P_DeltaY1
                add   ax, P_X1Inc               ;Increase/decrease X-counter

                add   di, P_X1Inc
                cmp   ax, P_NextX1

                jne   P_Loop

;-------------------- Here goes the new verticecalculating ------------------

                sub   di, P_X1Inc

                push  di
                push  si

                mov   di, P_COffs1
                mov   si, P_COffs1

                cmp   si, P_EndOffs             ;Test if si is at the start
                jl    P_LNotEnd                 ;of the coordinate list

                mov   si, P_StartOffs           ;If so, point to end
                sub   si, 4                     ;Neutralize following sub
P_LNotEnd :
                add   si, 4                     ;Point to next coordinates
                mov   dx, fs:[si]                  ;Can't move directly <|-(
                mov   P_NextX1, dx              ;Save next X-value c-clockwise
                mov   P_COffs1, si

                mov   ax, fs:[si]
                mov   P_X1Inc, 1                ;Count X2 right
                mov   dx, 1
                cmp   fs:[di], ax               ;X - NextX
                jle   P_LRight1
                mov   P_X1Inc, -1               ;Count X2 left
                mov   dx, -1
P_LRight1 :
                add   P_NextX1, dx
                sub   ax, fs:[di]               ;DeltaX2
                cmp   ax, 0
                jge   P__DeltX1Pos
                neg   ax
P__DeltX1Pos :
                inc   ax
                mov   P_DeltaX1, ax
                mov   dx, ax

                mov   ax, fs:[si + 2]
                sub   ax, fs:[di + 2]
                inc   ax
                mov   P_DeltaY1, ax

                mov   ax, fs:[di]

                pop   si
                pop   di

P_TestFin :
                push  ax

                mov   ax, P_YCounter
                cmp   ax, P_LowestY
                jl    P_NotFinish

                pop   ax
                popf                            ;Restore flags
                popa                            ;Restore registers
                ret                             ;Go home!
P_NotFinish :
                pop   ax

P_TestC2 :
                cmp   bp, P_DeltaY2
                jb    P_IncY

                sub   bp, P_DeltaY2
                add   bx, P_X2Inc               ;Increase/decrease X-counter
                add   si, P_X2Inc

                cmp   bx, P_NextX2              ;Finish?
                jne   P_TestC2                  ;Way to go!

;-------------------- Here goes the new verticecalculating ------------------

                sub   si, P_X2Inc

                push  di
                push  si

                mov   di, P_COffs2
                mov   si, P_COffs2

                cmp   si, P_StartOffs           ;Test if si is at the start
                jg    P_LNotStart               ;of the coordinate list

                mov   si, P_EndOffs             ;If so, point to end
                add   si, 4                     ;Neutralize following sub
P_LNotStart :
                sub   si, 4                     ;Point to next coordinates
                mov   bp, fs:[si]                  ;Can't move directly <|-(
                mov   P_NextX2, bp              ;Save next X-value c-clockwise
                mov   P_COffs2, si

                mov   bx, fs:[si]
                mov   P_X2Inc, 1                ;Count X2 right
                mov   bp, 1
                cmp   fs:[di], bx               ;X - NextX
                jle   P_LRight2
                mov   P_X2Inc, -1               ;Count X2 left
                mov   bp, -1
P_LRight2 :
                add   P_NextX2, bp
                sub   bx, fs:[di]               ;DeltaX2
                cmp   bx, 0
                jge   P__DeltX2Pos
                neg   bx
P__DeltX2Pos :
                inc   bx
                mov   P_DeltaX2, bx
                mov   bp, bx

                mov   bx, fs:[si + 2]
                sub   bx, fs:[di + 2]
                inc   bx
                mov   P_DeltaY2, bx

                mov   bx, fs:[di]

                pop   si
                pop   di

P_IncY :
                add   dx, P_DeltaX1
                add   bp, P_DeltaX2

                push  ax                        ;Save some all-purpose-regs
                push  bx
                push  cx
                push  di                        ;...and the pointers
                push  si

                cmp   P_YCounter, 0            ;Clip at top
                jl    P_DoneFill               ;Above? Then done.
                cmp   P_YCounter, 200          ;Clip at bottom
                jge   P_DoneFill               ;Below? Then done.

;------ Test X1-counter against left side of the screen (X-value = 0) --------

                cmp   ax, 0                     ;Clip against left side
                jg    Cl_TestX1Right
                mov   cx, P_YCounter
                shl   cx, 6                     ;Multiply by 320 to calc di's
                add   ch, BYTE PTR P_YCounter  ;pos in VGA-segment
                mov   di, cx                    ;Put new mem-position in di

                cmp   bx, 0                     ;Test if both pointers is
                jg    Cl_TestX2Right            ;outside at left side

                mov   al, 1
                mov   si, di
                jmp   P_DoneClip

;------ Test X1-counter against right side of the screen (X-value = 0) -------

Cl_TestX1Right :
                cmp   ax, 319                   ;Clip against right side
                jl    Cl_TestX2Left
                mov   cx, P_YCounter
                shl   cx, 6                     ;Multiply by 320 to calc di's
                add   ch, BYTE PTR P_YCounter  ;pos in the VGA-segment
                add   cx, 319                   ;Move to screen's right side
                mov   di, cx                    ;Put new mem-position in di

                cmp   bx, 319                   ;Test if both pointers is
                jl    Cl_TestX2Left             ;outside at right side

                mov   al, 1
                mov   si, di
                jmp   P_DoneClip

;------- Test X2-counter against left side of the screen (X-value = 0) -------

Cl_TestX2Left :
                cmp   bx, 0                     ;Clip against left side
                jg    Cl_TestX2Right
                mov   cx, P_YCounter
                shl   cx, 6                     ;Multiply by 320 to calc si's
                add   ch, BYTE PTR P_YCounter  ;pos in the VGA-segment
                mov   si, cx

;------ Test X2-counter against right side of the screen (X-value = 0) -------

Cl_TestX2Right :
                cmp   bx, 319                   ;Clip against right side
                jl    P_DoneClip
                mov   cx, P_YCounter
                shl   cx, 6                     ;Multiply by 320 to calc si's
                add   ch, BYTE PTR P_YCounter  ;pos in the VGA-segment
                add   cx, 319                   ;Move to screen's right side
                mov   si, cx

P_DoneClip :

;----------- Done all clipping, both against sides and top/bottom -----------

                std
                mov   bl, -1
                mov   bh, -1
                mov   cx, di
                sub   cx, si

                mov   ah, -1

                cmp   cx, 0
                jge   P_CountPos
                neg   cx
                cld
                mov   bl, 1
                mov   bh, 1
                mov   ah, 1
P_CountPos :
                cmp   al, 1
                je    P_Clipping
                inc   cx
P_Clipping :

                mov   ax, P_Col

                test  cx, 0000000000000001b
                jz    P_WordFill
                stosb
                dec   cx
P_WordFill :
                test  cx, 0000000000000010b
                jz    P_DWordFill

                cmp   bl, -1
                jne   P_NoFix1
                dec   di
P_NoFix1 :
                stosw
                sub  cx, 2
                mov  bh, 1
P_DWordFill :
                cmp   cx, 0
                jle   P_DoneFill

                cmp   bl, -1
                jne   P_NoFix3
                sub   di, 2
P_NoFix2 :

                cmp   bh, -1
                jne   P_NoFix3
                dec   di
P_NoFix3 :
                shl   eax, 16
                mov   al, BYTE PTR P_Col
                mov   ah, al

                shr   cx, 2
                rep   stosd

P_DoneFill :

                pop   si
                pop   di
                pop   cx
                pop   bx
                pop   ax

                add   di, 320
                add   si, 320
                inc   P_YCounter

                jmp   P_Loop

Cl_Poly       ENDP

;--------------------------- ASSEMBLER ROUTINE -------------------------------
;Name         : Visible
;Type         : Procedure
;Last update  : 10.04.95
;Action       : Tests if a triangle is visible for the crowd
;Optimized    : No. I know there is some improvements to be done.
;
;Input variables : [si] - [si+10] (6 Word values, 12 bytes)
;
;Output variables : ax
;
;Registers changed : ax
;
;Notes : The input values are three XY-coords. If the triangle is visible,
;ax is returned with a positive value, if not it's coming home negative.
;The value of ax may be used for something useful, light-sourcing f.ex.
;PS : If the triangle is very big, you'll get an overflow on the ax-value,
;so you may want to divide the input-values down here before calculating.
;----------------------------------------------------------------------------

Visible       PROC
                push  bx
                push  cx
                push  dx
                push  si
                push  di
                pushf

                mov   ax, es:[si]
                add   si, 2
                mov   bx, es:[si]
                add   si, 2
                mov   cx, es:[si]
                add   si, 2
                mov   dx, es:[si]
                add   si, 2
                mov   di, es:[si]
                add   si, 2
                mov   si, es:[si]

                sub   cx, ax                    ;X2-X1
                sub   si, bx                    ;Y3-Y1
                sub   dx, bx                    ;Y2-Y1
                sub   di, ax                    ;X3-X1

                sal   cx, 1
                sal   dx, 1
                sal   di, 1
                sal   si, 1

                mov   ax, di
                imul  dx
                mov   bx, ax

                mov   ax, si
                imul  cx

                sar   ax, 2
                sar   bx, 2

                sub   ax, bx

                popf
                pop   di
                pop   si
                pop   dx
                pop   cx
                pop   bx
                ret
Visible       ENDP

;----------------------------------------------------------------------------
;Name         : Rotate
;Type         : Procedure
;Last update  : 25.12.94
;Action       : Rotates a point around origo
;Optimized    : No. How do I a reduce the muls to 9???
;
;Input variables : ax = X   bx = Y   cx = Z
;                  dx = X_Angle si = Y_Angle di = Z_Angle
;
;Output variables : ax = NewX  bx = NewY  cx = NewZ
;
;Registers changed : ax, bx, cx
;
;Notes : Yes! Yes! Yes! At last : Rotating in assembler.
;----------------------------------------------------------------------------

Rotate        PROC
                pusha                           ;Save registers
                mov   X, ax                     ;Save coordinates
                mov   Y, bx                     ;
                mov   Z, cx                     ;

                shl   dx, 1                     ;Make word values(*2)
                shl   si, 1                     ;
                shl   di, 1                     ;

                mov   X_Angle, dx               ;Save angles
                mov   Y_Angle, si               ;
                mov   Z_Angle, di               ;


;----------------------------------------------------------------------------
;Let's rock around the X-axis first :
;----------------------------------------------------------------------------

                mov   si, OFFSET SinTabl        ;Point si to the Cos-values
                add   si, dx                    ;Point to value [X_Angle]
                mov   cx, [si + 180]            ;Load cosinus(X_angle) in cx
                mov   si, OFFSET SinTabl        ;Point si to the Sin-values
                add   si, dx                    ;Point to value [X_Angle]
                mov   bp, [si]                  ;Load sinus(X_angle) in bp

                mov   ax, Y                     ;Put Y-coordinate in ax

                imul  cx                        ;Multiply Y with Cosvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                mov   di, ax                    ;Save ax in di

                mov   ax, Z                     ;Put Z-coordinate in ax

                imul  bp                        ;Multiply Z (ax) with Sinvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                sub   di, ax                    ;Done
                mov   NewY, di                  ;Save NewY

;----------------------------------------------------------------------------
;Done calculating the new Y-coordinate rotated X_Angle degrees
;----------------------------------------------------------------------------

                mov   ax, Y                     ;Put Y-coordinate in ax

                imul  bp                        ;Multiply Y (ax) with Sinvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                mov   di, ax                    ;Save ax in di

                mov   ax, Z

                imul  cx                        ;Multiply Z (ax) with Cosvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                add   di, ax
                mov   NewZ, di                  ;Save NewZ

;----------------------------------------------------------------------------
;Done calculating the new Z-coordinate rotated X_Angle degrees
;----------------------------------------------------------------------------


;----------------------------------------------------------------------------
;Let's do the Z-axis :
;----------------------------------------------------------------------------

                mov   dx, Z_Angle

                mov   si, OFFSET SinTabl        ;Point si to the Cos-values
                add   si, dx                    ;Point to value [Z_Angle]
                mov   cx, [si + 180]            ;Load cosinus(Z_angle) in cx
                mov   si, OFFSET SinTabl        ;Point si to the Sin-values
                add   si, dx                    ;Point to value [Z_Angle]
                mov   bp, [si]                  ;Load sinus(Z_angle) in bp

                mov   ax, X                     ;Put X-coordinate in ax

                imul  cx                        ;Multiply X with Cosvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                mov   di, ax                    ;Save ax in di

                mov   ax, NewY                  ;Put Y-coordinate in ax

                imul  bp                        ;Multiply Y (ax) with Sinvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                sub   di, ax
                mov   NewX, di                  ;Save NewX

;----------------------------------------------------------------------------
;Done calculating the new X-coordinate rotated Z_Angle degrees
;----------------------------------------------------------------------------

                mov   ax, NewY                  ;Put Y-coordinate in ax

                imul  cx                        ;Multiply Y (ax) with Cosvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                mov   di, ax
                mov   ax, X                     ;Load X-coordinate

                imul  bp                        ;Multiply X (ax) with Sinvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                add   di, ax
                mov   NewY, di                  ;Save NewY

;----------------------------------------------------------------------------
;Done calculating the new Y-coordinate rotated Z_Angle degrees
;----------------------------------------------------------------------------


;----------------------------------------------------------------------------
;Let's swing the Y-axis :
;----------------------------------------------------------------------------

                mov   dx, Y_Angle

                mov   si, OFFSET SinTabl        ;Point si to the Cos-values
                add   si, dx                    ;Point to value [Z_Angle]
                mov   cx, [si + 180]            ;Load cosinus(Z_angle) in cx
                mov   si, OFFSET SinTabl        ;Point si to the Sin-values
                add   si, dx                    ;Point to value [Z_Angle]
                mov   bp, [si]                  ;Load sinus(Z_angle) in bp

                mov   ax, NewZ                  ;Put Z-coordinate in ax

                imul  cx                        ;Multiply Z with Cosvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                mov   di, ax                    ;Save ax in di

                mov   ax, NewX                  ;Put X-coordinate in ax

                imul  bp                        ;Multiply X (ax) with Sinvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                sub   di, ax                    ;Done
                mov   ax, NewZ                  ;Put "old" Z-coordinate in ax
                                                ;cause I can't use the newly
                                                ;calculated Z-coordinate here
                mov   NewZ, di                  ;Save NewZ

;----------------------------------------------------------------------------
;Done calculating the new Z-coordinate rotated Y_Angle degrees
;----------------------------------------------------------------------------

                imul  bp                        ;Multiply Z (ax) with Sinvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                mov   di, ax                    ;Save ax in di

                mov   ax, NewX                  ;Put X-coordinate in ax

                imul  cx                        ;Multiply X (ax) with Cosvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                add   di, ax
                mov   NewX, di                  ;Save NewX

;----------------------------------------------------------------------------
;Done calculating the new X-coordinate rotated Y_Angle degrees
;----------------------------------------------------------------------------

                popa                            ;Load registers

                mov   ax, NewX                  ;Put the calculated
                mov   bx, NewY                  ;values back in to the
                mov   cx, NewZ                  ;registers

                ret

Rotate        ENDP

;----------------------------------------------------------------------------
;Name         : FRotate
;Type         : Procedure
;Last update  : 25.12.94
;Action       : Rotates a point around origo in 2D
;Optimized    : No. How do I a reduce the muls to 9???
;
;Input variables : ax = X   bx = Y   di = Angle
;
;Output variables : ax = NewX  bx = NewY
;
;Registers changed : ax, bx
;
;Notes : Yes! Yes! Yes! At last : Rotating in assembler.
;----------------------------------------------------------------------------

FRotate       PROC
                pusha

                mov   X, ax                     ;Save coordinates

                shl   di, 1                     ;Make word values(*2)

;----------------------------------------------------------------------------
;Let's swing the Y-axis :
;----------------------------------------------------------------------------

                mov   si, OFFSET SinTabl        ;Point si to the Cos-values
                add   si, di                    ;Point to value [Z_Angle]
                mov   cx, [si + 180]            ;Load cosinus(Z_angle) in cx
                mov   si, OFFSET SinTabl        ;Point si to the Sin-values
                add   si, di                    ;Point to value [Z_Angle]
                mov   bp, [si]                  ;Load sinus(Z_angle) in bp

                mov   ax, bx                    ;Put Z-coordinate in ax

                imul  cx                        ;Multiply Z with Cosvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl                    ;

                mov   di, ax                    ;Save ax in di

                mov   ax, X                     ;Put X-coordinate in ax

                imul  bp                        ;Multiply X (ax) with Sinvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl

                sub   di, ax                    ;Done
                mov   ax, bx                    ;Put "old" Z-coordinate in ax
                                                ;cause I can't use the newly
                                                ;calculated Z-coordinate here
                mov   NewZ, di                  ;Save NewZ

;----------------------------------------------------------------------------
;Done calculating the new Z-coordinate rotated Y_Angle degrees
;----------------------------------------------------------------------------

                imul  bp                        ;Multiply Z (ax) with Sinvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl                    ;

                mov   di, ax                    ;Save ax in di

                mov   ax, X                     ;Put X-coordinate in ax

                imul  cx                        ;Multiply X (ax) with Cosvalue

                mov   al, ah                    ;Shift right by 8
                mov   ah, dl                    ;

                add   di, ax
                mov   NewX, di                  ;Save NewX

;----------------------------------------------------------------------------
;Done calculating the new X-coordinate rotated Y_Angle degrees
;----------------------------------------------------------------------------

                popa

                mov   ax, NewX                  ;Put the calculated
                mov   bx, NewZ                  ;registers

                ret
FRotate       ENDP

;----------------------------------------------------------------------------
;Name         : F3DTO2D
;Type         : Procedure
;Last update  : 09.01.95
;Action       : Projects 3D-coordinates (X, Y, Z) into the visible
;               X, Y - coordinates for the screen.
;Optimized    : Yes
;
;Input variables : ax = X   bx = Y   cx = Z
;
;Output variables : ax = NewX bx = NewY
;
;Registers changed : ax, bx, cx, dx, bp
;
;Notes : The coordinates are calculated using origo as center.
;----------------------------------------------------------------------------

F3DTo2D       PROC
                push  cx
                push  dx
                cmp   ax, 0
                je   _DoneX

                cwd
                mov   dl, ah                    ;\
                sal   ax, 8

                idiv  cx                        ;dx:ax / cx

_DoneX :
                cmp   bx, 0                     ;Is Y positive?
                je    _DoneY
                xchg  ax, bx
                cwd
                mov   dl, ah
                sal   ax, 8

                idiv  cx
                xchg  ax, bx
_DoneY :

                pop   dx
                pop   cx

                ret                             ;Go home!
F3DTo2D       ENDP

MyCode        ENDS

;------------------------------ CANVAS SEGMENT -------------------------------
Canvas        SEGMENT
                DB 64000 DUP (?)
Canvas        ENDS

END           Main





